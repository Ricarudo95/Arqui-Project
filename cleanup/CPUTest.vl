module CPUTester();
    
    reg reset = 1'b0, clk;


    // CPU #() DUT (.A_Address(A_Address),
    //                         .B_Address(B_Address),
    //                         .C_Address(C_Address),
    //                         .C_Data(Input_C),
    //                         .Write(E),
    //                         .Clk(clk),
    //                         .A_Data(Output_A),
    //                         .B_Data(Output_B));

    mipsCPU CPU(clk, reset);



    initial begin
        // To record the workbench we create a file to be read by GTKWave demostrating all inputs and outputs at any given time.
        $dumpfile("results/CPUFileTest.vcd");
        $dumpvars(0,clk, reset,
            //Prohram Counter Variables 
            CPU.Program_Counter,
            
            //Instruction Memory Variables
            CPU.Instruction_Memory, 

            //Control Unit Variables
            CPU.Control_Unit, 

            // ALU MOdule Variables
            CPU.alu,

            //Register File Variables
            CPU.Register_File,

            //RAM Variables
            CPU.ram,
            //Adder Variables
            CPU.addFour,

            //Mux Variables
            CPU.Jump_Mux,
            CPU.ALU_Mux,
            CPU.Register_Mux,
            CPU.RAM_Mux,
            CPU.Branch_Mux


            );
        
        
        // $monitor("Clock: %b Reset: %b instruction: %b ", clk, reset, dut.instruction);
        
      

        
        clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
        clk =0;#5 clk = 1;#5 
        clk =0;#5 clk = 1;#5

      
        clk =0;#5 clk = 1;#5;
        
    
       
        
        
    end

endmodule

   