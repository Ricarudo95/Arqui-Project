module CPUTester();
    
        // To Compile: iverilog -o results/CPUTestbench.vvp CPUTest.vl CPU.v ALUModule.v ControlModules.v MuxModules.v RamModules.v RegisterFile.v UtilModules.v
        // To Build: vvp results/CPUTestbench.vvp

    reg reset = 1'b0, clk;



    mipsCPUData1 CPU_Test1(clk, reset);
    mipsCPUData2 CPU_Test2(clk, reset);
    mipsCPUData2 CPU_Test3(clk, reset);



    initial begin
        // To record the workbench we create a file to be read by GTKWave demostrating all inputs and outputs at any given time.
        $dumpfile("results/CPUFileTest.vcd");
        $dumpvars(0,clk, reset,
            //Prohram Counter Variables 
            CPU_Test1.Program_Counter,
            CPU_Test2.Program_Counter,
            CPU_Test3.Program_Counter,
            
            //Instruction Memory Variables
            CPU_Test1.Instruction_Memory, 
            CPU_Test2.Instruction_Memory, 
            CPU_Test3.Instruction_Memory, 

            //Control Unit Variables
            CPU_Test1.Control_Unit, 
            CPU_Test2.Control_Unit, 
            CPU_Test3.Control_Unit, 

            // ALU MOdule Variables
            CPU_Test1.alu,
            CPU_Test2.alu,
            CPU_Test3.alu,

            //Register File Variables
            CPU_Test1.Register_File,
            CPU_Test2.Register_File,
            CPU_Test3.Register_File,

            //RAM Variables
            CPU_Test1.ram,
            CPU_Test2.ram,
            CPU_Test3.ram,

            //Adder Variables
            CPU_Test1.addFour,
            CPU_Test1.adder,
            CPU_Test2.addFour,
            CPU_Test2.adder,
            CPU_Test3.addFour,
            CPU_Test3.adder,

            //Shift 2 and Sign Sxtend Variables
            CPU_Test1.signExt,
            CPU_Test1.shftJump,
            CPU_Test1.shftLeft,
            CPU_Test1.simpleAND,

            CPU_Test2.signExt,
            CPU_Test2.shftJump,
            CPU_Test2.shftLeft,
            CPU_Test2.simpleAND,

            CPU_Test3.signExt,
            CPU_Test3.shftJump,
            CPU_Test3.shftLeft,
            CPU_Test3.simpleAND,

            //Mux Variables
            CPU_Test1.Jump_Mux,
            CPU_Test1.ALU_Mux,
            CPU_Test1.Register_Mux,
            CPU_Test1.RAM_Mux,
            CPU_Test1.Branch_Mux,

            CPU_Test2.Jump_Mux,
            CPU_Test2.ALU_Mux,
            CPU_Test2.Register_Mux,
            CPU_Test2.RAM_Mux,
            CPU_Test2.Branch_Mux,

            CPU_Test3.Jump_Mux,
            CPU_Test3.ALU_Mux,
            CPU_Test3.Register_Mux,
            CPU_Test3.RAM_Mux,
            CPU_Test3.Branch_Mux
            );
        
      

<<<<<<< HEAD

clk =0; #5 clk = 1;
$display("\n---------TEST BENCH 1-----------\n");
$display("\nProgram Counter: %d", CPU_Test1.Program_Counter.PCResult );
$display("\nCurrent Instruction: %b", CPU_Test1.Instruction_Memory.Instruction );
$display("\nIntrction Type: Imidiate");
$display("\nOperation Code: %b", CPU_Test1.Control_Unit.opcode );
$display("\nRegister S Address: %d", CPU_Test1.Register_File.A_Address );
$display("\nRegister T Adresss: %d", CPU_Test1.Register_File.B_Address );
$display("\nOffset: %d", CPU_Test1.signExt.ins );

#5 clk =0; #5 clk = 1;
$display("\nCurrent Instruction: %b", CPU_Test1.Instruction_Memory.Instruction );
#5 clk =0;#5 clk = 1;
#5 clk =0;#5 clk = 1;#5
=======
clk =0; #5 clk = 1;
$display("Current Instruction: %b", CPU_Test1.Instruction_Memory.Instruction );
$display("Current Instruction2: %b", CPU_Test2.Instruction_Memory.Instruction );
$display("Current Instruction3: %b", CPU_Test3.Instruction_Memory.Instruction );
#5 clk =0; #5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
>>>>>>> 521e6871d8e541076f5024c26b5743f4431e7766
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5       
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5
clk =0;#5 clk = 1;#5 
clk =0;#5 clk = 1;#5

      
clk =0;#5 clk = 1;#5;
        
    
       
        
        
    end

endmodule

   