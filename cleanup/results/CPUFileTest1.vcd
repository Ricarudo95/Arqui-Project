$date
	Fri Dec 14 01:31:49 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPUTester1 $end
$var reg 1 ! clk $end
$upscope $end
$scope module CPUTester1 $end
$var reg 1 " reset $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Program_Counter $end
$var wire 1 ! Clk $end
$var wire 1 # Load $end
$var wire 32 $ PCNext [31:0] $end
$var wire 1 " Reset $end
$var reg 32 % PCResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Memory $end
$var wire 32 & address [31:0] $end
$var wire 32 ' dataIn [31:0] $end
$var wire 1 ( memEnable $end
$var wire 1 ) rw $end
$var reg 1 * MOC $end
$var reg 32 + output_destination [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Control_Unit $end
$var wire 1 ! clk $end
$var wire 6 , opCode [5:0] $end
$var wire 1 " reset $end
$var wire 1 * MOC $end
$var reg 1 ) RW $end
$var reg 6 - aluCode [5:0] $end
$var reg 2 . aluSrc [1:0] $end
$var reg 1 / branch $end
$var reg 1 0 immediate $end
$var reg 1 1 irLoad $end
$var reg 1 2 jump $end
$var reg 1 3 marLoad $end
$var reg 1 4 mdrLoad $end
$var reg 1 5 mdrSource $end
$var reg 1 ( memEnable $end
$var reg 1 6 npcLoad $end
$var reg 1 # pcLoad $end
$var reg 1 7 pcSelect $end
$var reg 1 8 regWrite $end
$var reg 1 9 rfSource $end
$var reg 5 : state [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module alu $end
$var wire 32 ; b [31:0] $end
$var wire 6 < operation [5:0] $end
$var wire 32 = a [31:0] $end
$var reg 32 > Result [31:0] $end
$var reg 1 ? carryFlag $end
$var reg 1 @ negativeFlag $end
$var reg 1 A overFlowFlag $end
$var reg 32 B tempVar [31:0] $end
$var reg 1 C zeroFlag $end
$var integer 32 D counter [31:0] $end
$var integer 32 E var [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Register_File $end
$var wire 5 F A_Address [4:0] $end
$var wire 5 G B_Address [4:0] $end
$var wire 1 ! Clk $end
$var wire 1 5 Write $end
$var wire 32 H C_Data [31:0] $end
$var wire 5 I C_Address [4:0] $end
$var reg 32 J A_Data [31:0] $end
$var reg 32 K B_Data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module addFour $end
$var wire 32 L pc [31:0] $end
$var wire 32 M result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module adder $end
$var wire 32 N entry1 [31:0] $end
$var wire 32 O entry0 [31:0] $end
$var reg 32 P result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module signExt $end
$var wire 16 Q ins [15:0] $end
$var wire 1 R unSign $end
$var reg 32 S result [31:0] $end
$var reg 16 T tempOnes [15:0] $end
$var reg 16 U tempZero [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module shftJump $end
$var wire 26 V in [25:0] $end
$var reg 28 W result [27:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module shftLeft $end
$var wire 32 X in [31:0] $end
$var reg 32 Y result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module simpleAND $end
$var wire 1 C Z_flag $end
$var wire 1 / branch $end
$var reg 1 Z result $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module MAR $end
$var wire 1 3 load $end
$var wire 32 [ in [31:0] $end
$var reg 32 \ result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module MDR $end
$var wire 1 4 load $end
$var wire 32 ] in [31:0] $end
$var reg 32 ^ result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module NPC $end
$var wire 32 _ in [31:0] $end
$var wire 1 6 load $end
$var reg 32 ` result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module IR $end
$var wire 1 1 load $end
$var wire 32 a in [31:0] $end
$var reg 32 b result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module funcMux $end
$var wire 6 c one [5:0] $end
$var wire 1 0 s $end
$var wire 6 d zero [5:0] $end
$var reg 6 e result [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module pcMux $end
$var wire 32 f one [31:0] $end
$var wire 1 7 s $end
$var wire 32 g zero [31:0] $end
$var reg 32 h result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Jump_Mux $end
$var wire 32 i one [31:0] $end
$var wire 1 2 s $end
$var wire 32 j zero [31:0] $end
$var reg 32 k result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module ALU_Mux $end
$var wire 32 l three [31:0] $end
$var wire 32 m zero [31:0] $end
$var wire 32 n two [31:0] $end
$var wire 2 o s [1:0] $end
$var wire 32 p one [31:0] $end
$var reg 32 q result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Register_Mux $end
$var wire 5 r one [4:0] $end
$var wire 1 9 s $end
$var wire 5 s zero [4:0] $end
$var reg 5 t result [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module mdrMux $end
$var wire 32 u one [31:0] $end
$var wire 1 v s $end
$var wire 32 w zero [31:0] $end
$var reg 32 x result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Branch_Mux $end
$var wire 32 y zero [31:0] $end
$var wire 1 Z s $end
$var wire 32 z one [31:0] $end
$var reg 32 { result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 {
bx z
b100 y
bx x
bx w
zv
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
b0 l
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx k
b100 j
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx i
b0 h
bx g
b0 f
bx e
bx d
bx c
bx b
bx a
bx `
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx _
bx ^
bx ]
bx \
bx [
0Z
bx Y
bx X
bx W
bx V
b0 U
b1111111111111111 T
bx S
zR
bx Q
bx P
bx O
b100 N
b100 M
b0 L
bx K
bx J
bx I
bx H
bx G
bx F
b0 E
b0 D
0C
bx B
xA
x@
x?
bx >
b0 =
bx <
bx ;
b0 :
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
bx .
bx -
bx ,
bx +
1*
x)
x(
bx '
bx &
b0 %
bx $
x#
0"
0!
$end
#5
b1 :
b0 -
b0 c
b0 .
b0 o
b100 _
b100 k
bx =
bx h
05
04
03
0)
0/
02
08
09
01
00
07
0(
06
0#
1!
#10
0!
#15
0A
0?
b0 ;
b0 q
b100001 -
b100001 c
b11 .
b11 o
b0 H
b0 ]
b0 x
b0 >
b0 [
b0 u
b100001 <
b100001 e
b0 =
b0 h
10
17
1!
#16
b10 :
b0 &
b0 \
13
#20
0!
#25
b0 <
b0 e
b11 :
b0 -
b0 c
b100100000000010000000000101100 +
b100100000000010000000000101100 a
b100100000000010000000000101100 w
0*
1(
03
1!
#30
0!
#35
1!
#38
1*
#40
0!
#45
b0 K
b0 m
b0 J
b0 g
b10110100 P
b10110100 z
b10110000 O
b10110000 Y
b1000000000010110000 i
b1000000000010110000 W
b101100 S
b101100 X
b101100 p
b1 I
b1 t
b10000000000101100 V
b101100 Q
b1 G
b0 F
b0 r
b1 s
b101100 d
b1001 ,
b100100000000010000000000101100 b
11
b100 :
0(
1!
#50
0!
#55
b111 :
b1000 _
b1000 k
b1000 j
b1000 {
b10111000 P
b10111000 z
b1000 M
b1000 N
b1000 y
b100 %
b100 L
b100 f
b100 $
b100 `
b101100 <
b101100 e
1#
16
b0 .
b0 o
07
00
01
1!
#60
0!
#65
b1 :
0#
06
1!
#70
0!
#75
b100 H
b100 ]
b100 x
b100 >
b100 [
b100 u
b100001 -
b100001 c
b11 .
b11 o
b100001 <
b100001 e
b100 =
b100 h
10
17
1!
#76
b10 :
b100 &
b100 \
13
#80
0!
#85
b0 H
b0 ]
b0 x
b0 >
b0 [
b0 u
b0 <
b0 e
b11 :
b0 -
b0 c
b10010000001000100000000000000000 +
b10010000001000100000000000000000 a
b10010000001000100000000000000000 w
0*
1(
03
1!
#90
0!
#95
1!
#98
1*
#100
0!
#105
b1000 P
b1000 z
b0 O
b0 Y
b100010000000000000000000 i
b100010000000000000000000 W
b0 S
b0 X
b0 p
b10 I
b10 t
b1000100000000000000000 V
b0 Q
b10 G
b1 F
b10 s
b0 d
b100100 ,
b10010000001000100000000000000000 b
11
b100 :
0(
1!
#110
0!
#115
b1011 :
b1100 _
b1100 k
b1100 j
b1100 {
b1100 P
b1100 z
b1100 M
b1100 N
b1100 y
b1000 %
b1000 L
b1000 f
b1000 $
b1000 `
b0 =
b0 h
1#
16
b0 .
b0 o
07
00
01
1!
#120
0!
#125
b1 :
0#
06
1!
#130
0!
#135
b1000 H
b1000 ]
b1000 x
b1000 >
b1000 [
b1000 u
b100001 <
b100001 e
b100001 -
b100001 c
b11 .
b11 o
b1000 =
b1000 h
10
17
1!
#136
b10 :
b1000 &
b1000 \
13
#140
0!
#145
b0 H
b0 ]
b0 x
b0 >
b0 [
b0 u
b0 <
b0 e
b11 :
b0 -
b0 c
b10010000001000110000000000000010 +
b10010000001000110000000000000010 a
b10010000001000110000000000000010 w
0*
1(
03
1!
#150
0!
#155
1!
#158
1*
#160
0!
#165
b10100 P
b10100 z
b1000 O
b1000 Y
b100011000000000000001000 i
b100011000000000000001000 W
b10 S
b10 X
b10 p
b11 I
b11 t
b1000110000000000000010 V
b10 Q
b11 G
b11 s
b10 d
b10010000001000110000000000000010 b
11
b100 :
0(
1!
#170
0!
#175
b1011 :
b10000 _
b10000 k
b10000 j
b10000 {
b11000 P
b11000 z
b10000 M
b10000 N
b10000 y
b1100 %
b1100 L
b1100 f
b1100 $
b1100 `
b0 =
b0 h
b10 <
b10 e
1#
16
b0 .
b0 o
07
00
01
1!
#180
0!
#185
b1 :
0#
06
1!
#190
0!
#195
b1100 H
b1100 ]
b1100 x
b1100 >
b1100 [
b1100 u
b100001 -
b100001 c
b11 .
b11 o
b100001 <
b100001 e
b1100 =
b1100 h
10
17
1!
#196
b10 :
b1100 &
b1100 \
13
#200
0!
#205
b0 H
b0 ]
b0 x
b0 >
b0 [
b0 u
b0 <
b0 e
b11 :
b0 -
b0 c
b10100000100001 +
b10100000100001 a
b10100000100001 w
0*
1(
03
1!
#210
0!
#215
1!
#218
1*
#220
0!
#225
b1010000010010100 P
b1010000010010100 z
b1010000010000100 O
b1010000010000100 Y
b1010000010000100 i
b1010000010000100 W
b10100000100001 S
b10100000100001 X
b10100000100001 p
b0 I
b0 t
b10100000100001 V
b10100000100001 Q
b0 G
b0 F
b101 r
b0 s
b100001 d
b0 ,
b10100000100001 b
11
b100 :
0(
1!
#230
0!
#235
b110 :
b10100 _
b10100 k
b10100 j
b10100 {
b1010000010011000 P
b1010000010011000 z
b10100 M
b10100 N
b10100 y
b10000 %
b10000 L
b10000 f
b10000 $
b10000 `
b0 =
b0 h
b100001 <
b100001 e
1#
16
b0 .
b0 o
07
00
01
1!
#240
0!
#245
b1 :
0#
06
1!
#250
0!
#255
b10000 H
b10000 ]
b10000 x
b10000 >
b10000 [
b10000 u
b100001 -
b100001 c
b11 .
b11 o
b100001 <
b100001 e
b10000 =
b10000 h
10
17
1!
#256
b10 :
b10000 &
b10000 \
13
#260
0!
#265
b0 H
b0 ]
b0 x
b0 >
b0 [
b0 u
b0 <
b0 e
b11 :
b0 -
b0 c
b101000100010100000100001 +
b101000100010100000100001 a
b101000100010100000100001 w
0*
1(
03
1!
#270
0!
#275
1!
#278
1*
#280
0!
#285
b10100010001010000010000100 i
b10100010001010000010000100 W
b10 I
b10 t
b101000100010100000100001 V
b10 G
b101 F
b10 s
b101000100010100000100001 b
11
b100 :
0(
1!
#290
0!
#295
b110 :
b11000 _
b11000 k
b11000 j
b11000 {
b1010000010011100 P
b1010000010011100 z
b11000 M
b11000 N
b11000 y
b10100 %
b10100 L
b10100 f
b10100 $
b10100 `
b0 =
b0 h
b100001 <
b100001 e
1#
16
b0 .
b0 o
07
00
01
1!
#300
0!
#305
b1 :
0#
06
1!
#310
0!
#315
b10100 H
b10100 ]
b10100 x
b10100 >
b10100 [
b10100 u
b100001 -
b100001 c
b11 .
b11 o
b100001 <
b100001 e
b10100 =
b10100 h
10
17
1!
#316
b10 :
b10100 &
b10100 \
13
#320
0!
#325
b0 H
b0 ]
b0 x
b0 >
b0 [
b0 u
b0 <
b0 e
b11 :
b0 -
b0 c
b100100011000111111111111111111 +
b100100011000111111111111111111 a
b100100011000111111111111111111 w
0*
1(
03
1!
#330
0!
#335
1!
#338
1*
#340
0!
#345
b10100 P
b10100 z
b11111111111111111111111111111100 O
b11111111111111111111111111111100 Y
b1100011111111111111111100 i
b1100011111111111111111100 W
b11111111111111111111111111111111 S
b11111111111111111111111111111111 X
b11111111111111111111111111111111 p
b11 I
b11 t
b11000111111111111111111 V
b1111111111111111 Q
b11 G
b11 F
b11111 r
b11 s
b111111 d
b1001 ,
b100100011000111111111111111111 b
11
b100 :
0(
1!
#350
0!
#355
b111 :
b11100 _
b11100 k
b11100 j
b11100 {
b11000 P
b11000 z
b11100 M
b11100 N
b11100 y
b11000 %
b11000 L
b11000 f
b11000 $
b11000 `
b0 =
b0 h
b111111 <
b111111 e
1#
16
b0 .
b0 o
07
00
01
1!
#360
0!
#365
b1 :
0#
06
1!
#370
0!
#375
b11000 H
b11000 ]
b11000 x
b11000 >
b11000 [
b11000 u
b100001 -
b100001 c
b11 .
b11 o
b100001 <
b100001 e
b11000 =
b11000 h
10
17
1!
#376
b10 :
b11000 &
b11000 \
13
#380
0!
#385
b0 H
b0 ]
b0 x
b0 >
b0 [
b0 u
b0 <
b0 e
b11 :
b0 -
b0 c
b11100011000001111111111111101 +
b11100011000001111111111111101 a
b11100011000001111111111111101 w
0*
1(
03
1!
#390
0!
#395
1!
#398
1*
#400
0!
#405
b10000 P
b10000 z
b11111111111111111111111111110100 O
b11111111111111111111111111110100 Y
b1100000111111111111110100 i
b1100000111111111111110100 W
b11111111111111111111111111111101 S
b11111111111111111111111111111101 X
b11111111111111111111111111111101 p
b0 I
b0 t
b11000001111111111111101 V
b1111111111111101 Q
b0 G
b0 s
b111101 d
b111 ,
b11100011000001111111111111101 b
11
b100 :
0(
1!
#410
0!
#415
b1111 :
b100000 _
b100000 k
b100000 j
b100000 {
b10100 P
b10100 z
b100000 M
b100000 N
b100000 y
b11100 %
b11100 L
b11100 f
b11100 $
b11100 `
b0 =
b0 h
b111101 <
b111101 e
1#
16
b0 .
b0 o
07
00
01
1!
#420
0!
#425
1!
#430
0!
#435
1!
#440
0!
#445
1!
#450
0!
#455
1!
#460
0!
#465
1!
#470
0!
#475
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
#510
0!
#515
1!
#520
0!
#525
1!
#530
0!
#535
1!
#540
0!
#545
1!
#550
0!
#555
1!
#560
0!
#565
1!
#570
0!
#575
1!
#580
0!
#585
1!
#590
0!
#595
1!
#600
0!
#605
1!
#610
0!
#615
1!
#620
0!
#625
1!
#630
0!
#635
1!
#640
0!
#645
1!
#650
0!
#655
1!
#660
0!
#665
1!
#670
0!
#675
1!
#680
0!
#685
1!
#690
0!
#695
1!
#700
0!
#705
1!
#710
0!
#715
1!
#720
0!
#725
1!
#730
0!
#735
1!
#740
0!
#745
1!
#750
0!
#755
1!
#760
0!
#765
1!
#770
0!
#775
1!
#780
0!
#785
1!
#790
0!
#795
1!
#800
0!
#805
1!
#810
0!
#815
1!
#820
0!
#825
1!
#830
0!
#835
1!
#840
0!
#845
1!
#850
0!
#855
1!
#860
0!
#865
1!
#870
0!
#875
1!
#880
0!
#885
1!
#890
0!
#895
1!
#900
0!
#905
1!
#910
0!
#915
1!
#920
0!
#925
1!
#930
0!
#935
1!
#940
0!
#945
1!
#950
0!
#955
1!
#960
0!
#965
1!
#970
0!
#975
1!
#980
0!
#985
1!
#990
0!
#995
1!
#1000
0!
#1005
1!
#1010
0!
#1015
1!
#1020
0!
#1025
1!
#1030
0!
#1035
1!
#1040
0!
#1045
1!
#1050
0!
#1055
1!
#1060
0!
#1065
1!
#1070
0!
#1075
1!
#1080
0!
#1085
1!
#1090
0!
#1095
1!
#1100
0!
#1105
1!
#1110
0!
#1115
1!
#1120
0!
#1125
1!
#1130
0!
#1135
1!
#1140
0!
#1145
1!
#1150
0!
#1155
1!
#1160
0!
#1165
1!
#1170
0!
#1175
1!
#1180
0!
#1185
1!
#1190
0!
#1195
1!
#1200
0!
#1205
1!
#1210
0!
#1215
1!
#1220
0!
#1225
1!
#1230
0!
#1235
1!
#1240
0!
#1245
1!
#1250
0!
#1255
1!
#1260
0!
#1265
1!
#1270
0!
#1275
1!
#1280
0!
#1285
1!
#1290
0!
#1295
1!
#1300
