$date
	Fri Dec 14 12:56:09 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPUTester1 $end
$var reg 1 ! clk $end
$upscope $end
$scope module CPUTester1 $end
$var reg 1 " reset $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Program_Counter $end
$var wire 1 ! Clk $end
$var wire 1 # Load $end
$var wire 32 $ PCNext [31:0] $end
$var wire 1 " Reset $end
$var reg 32 % PCResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Memory $end
$var wire 32 & address [31:0] $end
$var wire 1 ' byte $end
$var wire 32 ( dataIn [31:0] $end
$var wire 1 ) memEnable $end
$var wire 1 * rw $end
$var reg 1 + MOC $end
$var reg 32 , output_destination [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Control_Unit $end
$var wire 1 ! clk $end
$var wire 6 - opCode [5:0] $end
$var wire 1 " reset $end
$var wire 1 + MOC $end
$var reg 1 * RW $end
$var reg 6 . aluCode [5:0] $end
$var reg 2 / aluSrc [1:0] $end
$var reg 1 0 branch $end
$var reg 1 ' byte $end
$var reg 1 1 immediate $end
$var reg 1 2 irLoad $end
$var reg 1 3 jump $end
$var reg 1 4 marLoad $end
$var reg 1 5 mdrLoad $end
$var reg 1 6 mdrSource $end
$var reg 1 ) memEnable $end
$var reg 1 7 npcLoad $end
$var reg 1 # pcLoad $end
$var reg 1 8 pcSelect $end
$var reg 1 9 regWrite $end
$var reg 1 : rfSource $end
$var reg 5 ; state [4:0] $end
$var reg 1 < unSign $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module alu $end
$var wire 32 = b [31:0] $end
$var wire 6 > operation [5:0] $end
$var wire 32 ? a [31:0] $end
$var reg 32 @ Result [31:0] $end
$var reg 1 A carryFlag $end
$var reg 1 B negativeFlag $end
$var reg 1 C overFlowFlag $end
$var reg 32 D tempVar [31:0] $end
$var reg 1 E zeroFlag $end
$var integer 32 F counter [31:0] $end
$var integer 32 G index [31:0] $end
$var integer 32 H var [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Register_File $end
$var wire 5 I A_Address [4:0] $end
$var wire 5 J B_Address [4:0] $end
$var wire 1 ! Clk $end
$var wire 1 9 Write $end
$var wire 32 K C_Data [31:0] $end
$var wire 5 L C_Address [4:0] $end
$var reg 32 M A_Data [31:0] $end
$var reg 32 N B_Data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module addFour $end
$var wire 32 O pc [31:0] $end
$var wire 32 P result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module adder $end
$var wire 32 Q entry1 [31:0] $end
$var wire 32 R entry0 [31:0] $end
$var reg 32 S result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module signExt $end
$var wire 16 T ins [15:0] $end
$var wire 1 < unSign $end
$var reg 32 U result [31:0] $end
$var reg 16 V tempOnes [15:0] $end
$var reg 16 W tempZero [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module shftJump $end
$var wire 26 X in [25:0] $end
$var reg 28 Y result [27:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module shftLeft $end
$var wire 32 Z in [31:0] $end
$var reg 32 [ result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module simpleAND $end
$var wire 1 E Z_flag $end
$var wire 1 0 branch $end
$var reg 1 \ result $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module MAR $end
$var wire 1 4 load $end
$var wire 32 ] in [31:0] $end
$var reg 32 ^ result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module MDR $end
$var wire 1 5 load $end
$var wire 32 _ in [31:0] $end
$var reg 32 ` result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module NPC $end
$var wire 32 a in [31:0] $end
$var wire 1 7 load $end
$var reg 32 b result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module IR $end
$var wire 1 2 load $end
$var wire 32 c in [31:0] $end
$var reg 32 d result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module funcMux $end
$var wire 6 e one [5:0] $end
$var wire 1 1 s $end
$var wire 6 f zero [5:0] $end
$var reg 6 g result [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module pcMux $end
$var wire 32 h one [31:0] $end
$var wire 1 8 s $end
$var wire 32 i zero [31:0] $end
$var reg 32 j result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Jump_Mux $end
$var wire 32 k one [31:0] $end
$var wire 1 3 s $end
$var wire 32 l zero [31:0] $end
$var reg 32 m result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module ALU_Mux $end
$var wire 32 n three [31:0] $end
$var wire 32 o zero [31:0] $end
$var wire 32 p two [31:0] $end
$var wire 2 q s [1:0] $end
$var wire 32 r one [31:0] $end
$var reg 32 s result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Register_Mux $end
$var wire 5 t one [4:0] $end
$var wire 1 : s $end
$var wire 5 u zero [4:0] $end
$var reg 5 v result [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module mdrMux $end
$var wire 32 w one [31:0] $end
$var wire 1 6 s $end
$var wire 32 x zero [31:0] $end
$var reg 32 y result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Branch_Mux $end
$var wire 32 z zero [31:0] $end
$var wire 1 \ s $end
$var wire 32 { one [31:0] $end
$var reg 32 | result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 |
bx {
b100 z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
b0 n
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx m
b100 l
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx k
b0 j
bx i
b0 h
bx g
bx f
bx e
bx d
bx c
bx b
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx a
bx `
bx _
bx ^
bx ]
0\
bx [
bx Z
bx Y
bx X
b0 W
b1111111111111111 V
bx U
bx T
bx S
bx R
b100 Q
b100 P
b0 O
bx N
bx M
bx L
bx K
bx J
bx I
b0 H
bx G
b0 F
0E
bx D
xC
xB
xA
bx @
b0 ?
bx >
bx =
x<
b0 ;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
bx /
bx .
bx -
bx ,
1+
x*
x)
bx (
x'
bx &
b0 %
bx $
x#
0"
0!
$end
#5
b0 /
b0 q
b100 a
b100 m
bx ?
bx j
06
05
04
0*
00
03
09
0:
02
01
08
0)
0<
07
0#
0'
1!
#6
b1 ;
#10
0!
#15
0C
0A
b0 @
b0 ]
b0 w
b100001 >
b100001 g
b0 =
b0 s
b100001 .
b100001 e
b11 /
b11 q
b100 $
b100 b
b0 ?
b0 j
11
07
18
1!
#16
b0 &
b0 ^
14
#17
b10 ;
#20
0!
#25
b100100000000010000000000101100 K
b100100000000010000000000101100 _
b100100000000010000000000101100 y
b100100000000010000000000101100 ,
b100100000000010000000000101100 c
b100100000000010000000000101100 x
0+
1)
04
1!
#26
b11 ;
#30
0!
#35
1!
#38
1+
#40
0!
#45
0)
1!
#46
b0 N
b0 o
b0 M
b0 i
b10110100 S
b10110100 {
b10110000 R
b10110000 [
b1000000000010110000 k
b1000000000010110000 Y
b101100 U
b101100 Z
b101100 r
b1 L
b1 v
b10000000000101100 X
b101100 T
b1 J
b0 I
b0 t
b1 u
b101100 f
b1001 -
b100100000000010000000000101100 d
12
#47
b100 ;
#50
0!
#55
b101100 >
b101100 g
1<
b100001 .
b100001 e
b0 /
b0 q
08
01
02
1!
#56
b110 ;
#60
0!
#65
b101100 @
b101100 ]
b101100 w
b101100 =
b101100 s
b101100 K
b101100 _
b101100 y
b100001 >
b100001 g
b1 /
b1 q
16
11
1!
#66
b101100 N
b101100 o
b1000 a
b1000 m
b1000 l
b1000 |
b10111000 S
b10111000 {
b1000 P
b1000 Q
b1000 z
b100 %
b100 O
b100 h
b101100 (
b101100 `
b101100 p
1#
17
19
15
#67
b1 ;
#70
0!
#75
b0 =
b0 s
b11 /
b11 q
b100 K
b100 _
b100 y
b100 @
b100 ]
b100 w
b100 ?
b100 j
07
0<
0#
05
18
1!
#76
b100 &
b100 ^
14
#77
b10 ;
#80
0!
#85
b10010000001000100000000000000000 ,
b10010000001000100000000000000000 c
b10010000001000100000000000000000 x
0+
1)
04
1!
#86
b11 ;
#90
0!
#95
1!
#98
1+
#100
0!
#105
0)
1!
#106
b0 N
b0 o
b101100 M
b101100 i
b1000 S
b1000 {
b0 R
b0 [
b100010000000000000000000 k
b100010000000000000000000 Y
b0 U
b0 Z
b0 r
b10 L
b10 v
b1000100000000000000000 X
b0 T
b10 J
b1 I
b10 u
b0 f
b100100 -
b10010000001000100000000000000000 d
12
#107
b100 ;
#110
0!
#115
b0 @
b0 ]
b0 w
b101100 ?
b101100 j
b0 >
b0 g
b10010000001000100000000000000000 K
b10010000001000100000000000000000 _
b10010000001000100000000000000000 y
1'
1<
b100001 .
b100001 e
b0 /
b0 q
08
01
02
06
09
1!
#116
b111 ;
#120
0!
#125
0B
b100000 .
b100000 e
b1 /
b1 q
b101100 @
b101100 ]
b101100 w
b100000 >
b100000 g
11
1!
#126
b101100 &
b101100 ^
14
#127
b1000 ;
#130
0!
#135
b11001000000000000000000000000 K
b11001000000000000000000000000 _
b11001000000000000000000000000 y
b11001000000000000000000000000 ,
b11001000000000000000000000000 c
b11001000000000000000000000000 x
0+
1)
04
1!
#136
b1001 ;
#140
0!
#142
1+
#145
1!
#146
b11001000000000000000000000000 N
b11001000000000000000000000000 o
b1100 a
b1100 m
b1100 l
b1100 |
b1100 S
b1100 {
b1100 P
b1100 Q
b1100 z
b1000 %
b1000 O
b1000 h
b1000 $
b1000 b
b11001000000000000000000000000 (
b11001000000000000000000000000 `
b11001000000000000000000000000 p
1#
17
19
0)
15
#147
b1 ;
#150
0!
#155
b100001 >
b100001 g
b100001 .
b100001 e
b11 /
b11 q
b1000 @
b1000 ]
b1000 w
b1000 ?
b1000 j
07
0<
0#
05
18
1!
#156
b1000 &
b1000 ^
14
#157
b10 ;
#160
0!
#165
b10010000000000000000000000000000 K
b10010000000000000000000000000000 _
b10010000000000000000000000000000 y
b10010000000000000000000000000000 ,
b10010000000000000000000000000000 c
b10010000000000000000000000000000 x
0+
1)
04
1!
#166
b11 ;
#170
0!
#172
1+
#175
0)
1!
#176
b0 N
b0 o
b0 M
b0 i
b0 k
b0 Y
b0 L
b0 v
b0 X
b0 J
b0 I
b0 u
b10010000000000000000000000000000 d
12
#177
b100 ;
#180
0!
#185
b0 @
b0 ]
b0 w
b0 ?
b0 j
b0 >
b0 g
1<
b100001 .
b100001 e
b0 /
b0 q
08
01
02
09
1!
#186
b111 ;
#190
0!
#195
1E
b100000 .
b100000 e
b1 /
b1 q
b100000 >
b100000 g
11
1!
#196
b0 &
b0 ^
14
#197
b1000 ;
#200
0!
#205
b100100000000000000000000000000 K
b100100000000000000000000000000 _
b100100000000000000000000000000 y
b100100000000000000000000000000 ,
b100100000000000000000000000000 c
b100100000000000000000000000000 x
0+
1)
04
1!
#206
b1001 ;
#210
0!
#212
1+
#215
1!
#216
b10000 a
b10000 m
b10000 l
b10000 |
b10000 S
b10000 {
b10000 P
b10000 Q
b10000 z
b1100 %
b1100 O
b1100 h
b1100 $
b1100 b
b100100000000000000000000000000 (
b100100000000000000000000000000 `
b100100000000000000000000000000 p
1#
17
19
0)
15
#217
b1 ;
#220
0!
#225
b100001 >
b100001 g
b100001 .
b100001 e
b11 /
b11 q
0E
b1100 @
b1100 ]
b1100 w
b1100 ?
b1100 j
07
0<
0#
05
18
1!
#226
b1100 &
b1100 ^
14
#227
b10 ;
#230
0!
#235
b0 K
b0 _
b0 y
b0 ,
b0 c
b0 x
0+
1)
04
1!
#236
b11 ;
#240
0!
#242
1+
#245
0)
1!
#246
b0 -
b0 d
12
#247
b100 ;
#250
0!
#255
b0 @
b0 ]
b0 w
b0 ?
b0 j
b0 >
b0 g
b0 .
b0 e
b0 /
b0 q
08
01
02
09
1!
#256
b101 ;
#260
0!
#265
b0 (
b0 `
b0 p
16
15
1:
1!
#266
b10100 a
b10100 m
b10100 l
b10100 |
b10100 S
b10100 {
b10100 P
b10100 Q
b10100 z
b10000 %
b10000 O
b10000 h
b10000 $
b10000 b
1#
17
19
#267
b1 ;
#270
0!
#275
b10000 K
b10000 _
b10000 y
b10000 @
b10000 ]
b10000 w
b100001 >
b100001 g
b100001 .
b100001 e
b11 /
b11 q
b10000 ?
b10000 j
07
11
0#
05
18
1!
#276
b10000 &
b10000 ^
14
#277
b10 ;
#280
0!
#285
0+
1)
04
1!
#286
b11 ;
#290
0!
#292
1+
#295
0)
1!
#296
12
#297
b100 ;
#300
0!
#305
b0 @
b0 ]
b0 w
b0 ?
b0 j
b0 >
b0 g
b0 K
b0 _
b0 y
b0 .
b0 e
b0 /
b0 q
08
01
02
06
09
1!
#306
b101 ;
#310
0!
#315
16
15
1!
#316
b11000 a
b11000 m
b11000 l
b11000 |
b11000 S
b11000 {
b11000 P
b11000 Q
b11000 z
b10100 %
b10100 O
b10100 h
b10100 $
b10100 b
1#
17
19
#317
b1 ;
#320
0!
#325
b10100 K
b10100 _
b10100 y
b10100 @
b10100 ]
b10100 w
b100001 >
b100001 g
b100001 .
b100001 e
b11 /
b11 q
b10100 ?
b10100 j
07
11
0#
05
18
1!
#326
b10100 &
b10100 ^
14
#327
b10 ;
#330
0!
#335
b100100000000000000000000000000 ,
b100100000000000000000000000000 c
b100100000000000000000000000000 x
0+
1)
04
1!
#336
b11 ;
#340
0!
#342
1+
#345
0)
1!
#346
b1001 -
b100100000000000000000000000000 d
12
#347
b100 ;
#350
0!
#355
b0 @
b0 ]
b0 w
b0 ?
b0 j
b0 >
b0 g
b100100000000000000000000000000 K
b100100000000000000000000000000 _
b100100000000000000000000000000 y
1<
b100001 .
b100001 e
b0 /
b0 q
08
01
02
06
09
1!
#356
b110 ;
#360
0!
#365
b0 K
b0 _
b0 y
b100001 >
b100001 g
b1 /
b1 q
16
11
0:
1!
#366
b11100 a
b11100 m
b11100 l
b11100 |
b11100 S
b11100 {
b11100 P
b11100 Q
b11100 z
b11000 %
b11000 O
b11000 h
b11000 $
b11000 b
1#
17
19
15
#367
b1 ;
#370
0!
#375
b11 /
b11 q
b11000 K
b11000 _
b11000 y
b11000 @
b11000 ]
b11000 w
b11000 ?
b11000 j
07
0<
0#
05
18
1!
#376
b11000 &
b11000 ^
14
#377
b10 ;
#380
0!
#385
b11100000000000000000000000000 ,
b11100000000000000000000000000 c
b11100000000000000000000000000 x
0+
1)
04
1!
#386
b11 ;
#390
0!
#392
1+
#395
0)
1!
#396
b111 -
b11100000000000000000000000000 d
12
#397
b100 ;
#400
0!
#405
b0 @
b0 ]
b0 w
b0 ?
b0 j
b0 >
b0 g
b11100000000000000000000000000 K
b11100000000000000000000000000 _
b11100000000000000000000000000 y
b10111 .
b10111 e
b0 /
b0 q
08
01
02
06
09
1!
#406
b10000 ;
#410
0!
#415
10
1!
#416
b1 ;
#420
0!
#425
b11100 @
b11100 ]
b11100 w
b100001 .
b100001 e
b11 /
b11 q
b100000 a
b100000 m
b100000 l
b100000 |
b100000 S
b100000 {
b100001 >
b100001 g
b100000 P
b100000 Q
b100000 z
b11100 %
b11100 O
b11100 h
b11100 $
b11100 b
b11100 ?
b11100 j
11
07
18
1!
#426
b11100 &
b11100 ^
14
#427
b10 ;
#430
0!
#435
b0 K
b0 _
b0 y
b0 ,
b0 c
b0 x
0+
1)
04
1!
#436
b11 ;
#440
0!
#442
1+
#445
0)
1!
#446
b0 -
b0 d
12
#447
b100 ;
#450
0!
#455
b0 @
b0 ]
b0 w
b0 ?
b0 j
b0 >
b0 g
b0 .
b0 e
b0 /
b0 q
08
01
02
1!
#456
b101 ;
#460
0!
#465
16
15
00
1:
1!
#466
b100100 a
b100100 m
b100100 l
b100100 |
b100100 S
b100100 {
b100100 P
b100100 Q
b100100 z
b100000 %
b100000 O
b100000 h
b100000 $
b100000 b
1#
17
19
#467
b1 ;
#470
0!
#475
b100000 K
b100000 _
b100000 y
b100000 @
b100000 ]
b100000 w
b100001 >
b100001 g
b100001 .
b100001 e
b11 /
b11 q
b100000 ?
b100000 j
07
11
0#
05
18
1!
#476
b100000 &
b100000 ^
14
#477
b10 ;
#480
0!
#485
b10100000000000000000000000000000 ,
b10100000000000000000000000000000 c
b10100000000000000000000000000000 x
0+
1)
04
1!
#486
b11 ;
#490
0!
#492
1+
#495
0)
1!
#496
b101000 -
b10100000000000000000000000000000 d
12
#497
b100 ;
#500
0!
#505
b0 @
b0 ]
b0 w
b0 ?
b0 j
b0 >
b0 g
b10100000000000000000000000000000 K
b10100000000000000000000000000000 _
b10100000000000000000000000000000 y
b0 .
b0 e
b0 /
b0 q
08
01
02
06
09
1!
#506
b1010 ;
#510
0!
#515
1E
b100000 >
b100000 g
b100000 .
b100000 e
b1 /
b1 q
11
1!
#516
b0 &
b0 ^
14
#517
b1011 ;
#520
0!
#525
b111 >
b111 g
b111 .
b111 e
b0 /
b0 q
b0 K
b0 _
b0 y
16
04
1!
#526
15
#527
b1100 ;
#530
0!
#535
b0 >
b0 g
b0 .
b0 e
b101000 a
b101000 m
b101000 l
b101000 |
b101000 S
b101000 {
b101000 P
b101000 Q
b101000 z
b100100 %
b100100 O
b100100 h
b100100 $
b100100 b
0+
1#
17
1*
0)
05
1!
#536
b1 ;
#540
0!
#542
1+
#545
b100100 K
b100100 _
b100100 y
b100100 @
b100100 ]
b100100 w
b100001 >
b100001 g
b100001 .
b100001 e
b11 /
b11 q
b100100 ?
b100100 j
07
0#
18
1!
#546
b100100 &
b100100 ^
14
#547
b10 ;
#550
0!
#555
b10000000000000000000000000000 ,
b10000000000000000000000000000 c
b10000000000000000000000000000 x
0+
0*
1)
04
1!
#556
b11 ;
#560
0!
#562
1+
#565
0)
1!
#566
b100 -
b10000000000000000000000000000 d
12
#567
b100 ;
#570
0!
#575
b0 @
b0 ]
b0 w
b0 ?
b0 j
b0 >
b0 g
b10000000000000000000000000000 K
b10000000000000000000000000000 _
b10000000000000000000000000000 y
b1 .
b1 e
b0 /
b0 q
08
01
02
06
1!
#576
b10000 ;
#580
0!
#585
1\
10
1!
#586
b1 ;
#590
0!
#595
b101000 @
b101000 ]
b101000 w
b100001 .
b100001 e
b11 /
b11 q
b101100 a
b101100 m
b101100 l
b101100 |
b101100 S
b101100 {
b100001 >
b100001 g
b101100 P
b101100 Q
b101100 z
b101000 %
b101000 O
b101000 h
b101000 $
b101000 b
b101000 ?
b101000 j
11
07
18
1!
#596
b101000 &
b101000 ^
14
#597
b10 ;
#600
0!
#605
b0 K
b0 _
b0 y
b0 ,
b0 c
b0 x
0+
1)
04
1!
#606
b11 ;
#610
0!
#612
1+
#615
0)
1!
#616
b0 -
b0 d
12
#617
b100 ;
#620
0!
#625
b0 @
b0 ]
b0 w
b0 ?
b0 j
b0 >
b0 g
b0 .
b0 e
b0 /
b0 q
08
01
02
1!
#626
b101 ;
#630
0!
#635
0\
16
15
00
1!
#636
b110000 a
b110000 m
b110000 l
b110000 |
b110000 S
b110000 {
b110000 P
b110000 Q
b110000 z
b101100 %
b101100 O
b101100 h
b101100 $
b101100 b
1#
17
19
#637
b1 ;
#640
0!
#645
b101100 K
b101100 _
b101100 y
b101100 @
b101100 ]
b101100 w
b100001 >
b100001 g
b100001 .
b100001 e
b11 /
b11 q
b101100 ?
b101100 j
07
11
0#
05
18
1!
#646
b101100 &
b101100 ^
14
#647
b10 ;
#650
0!
#655
b11001000000000000000000000000 ,
b11001000000000000000000000000 c
b11001000000000000000000000000 x
0+
1)
04
1!
#656
b11 ;
#660
0!
#662
1+
#665
0)
1!
#666
b100000000000000000000000000 k
b100000000000000000000000000 Y
b1000000000000000000000000 X
b1000 I
b110 -
b11001000000000000000000000000 d
12
#667
b100 ;
#670
0!
#675
b0 @
b0 ]
b0 w
b0 ?
b0 j
b0 >
b0 g
b11001000000000000000000000000 K
b11001000000000000000000000000 _
b11001000000000000000000000000 y
b0 .
b0 e
b0 /
b0 q
08
01
02
06
09
1!
#676
b10000 ;
#680
0!
#685
1\
10
1!
#686
b1 ;
#690
0!
#695
b110000 @
b110000 ]
b110000 w
b100001 >
b100001 g
b100001 .
b100001 e
b11 /
b11 q
b110100 a
b110100 m
b110100 l
b110100 |
b110100 S
b110100 {
b110100 P
b110100 Q
b110100 z
b110000 %
b110000 O
b110000 h
b110000 $
b110000 b
b110000 ?
b110000 j
11
07
18
1!
#696
b110000 &
b110000 ^
14
#697
b10 ;
#700
