$date
	Thu Dec 13 21:53:35 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPUTester1 $end
$var reg 1 ! clk $end
$upscope $end
$scope module CPUTester1 $end
$var reg 1 " reset $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Program_Counter $end
$var wire 1 ! Clk $end
$var wire 1 # Load $end
$var wire 32 $ PCNext [31:0] $end
$var wire 1 " Reset $end
$var reg 32 % PCResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Memory $end
$var wire 32 & dataIn [31:0] $end
$var wire 1 ' memEnable $end
$var wire 1 ( rw $end
$var wire 32 ) address [31:0] $end
$var reg 1 * MOC $end
$var reg 32 + output_destination [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Control_Unit $end
$var wire 1 ! clk $end
$var wire 6 , opCode [5:0] $end
$var wire 1 " reset $end
$var wire 1 * MOC $end
$var reg 1 ( RW $end
$var reg 6 - aluCode [5:0] $end
$var reg 2 . aluSrc [1:0] $end
$var reg 1 / branch $end
$var reg 1 0 immediate $end
$var reg 1 1 irLoad $end
$var reg 1 2 jump $end
$var reg 1 3 marLoad $end
$var reg 1 4 mdrLoad $end
$var reg 1 5 mdrSource $end
$var reg 1 ' memEnable $end
$var reg 1 6 npcLoad $end
$var reg 1 # pcLoad $end
$var reg 1 7 pcSelect $end
$var reg 1 8 regWrite $end
$var reg 1 9 rfSource $end
$var reg 5 : state [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module alu $end
$var wire 32 ; b [31:0] $end
$var wire 6 < operation [5:0] $end
$var wire 32 = a [31:0] $end
$var reg 32 > Result [31:0] $end
$var reg 1 ? carryFlag $end
$var reg 1 @ negativeFlag $end
$var reg 1 A overFlowFlag $end
$var reg 32 B tempVar [31:0] $end
$var reg 1 C zeroFlag $end
$var integer 32 D counter [31:0] $end
$var integer 32 E var [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Register_File $end
$var wire 5 F A_Address [4:0] $end
$var wire 5 G B_Address [4:0] $end
$var wire 1 ! Clk $end
$var wire 1 5 Write $end
$var wire 32 H C_Data [31:0] $end
$var wire 5 I C_Address [4:0] $end
$var reg 32 J A_Data [31:0] $end
$var reg 32 K B_Data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module addFour $end
$var wire 32 L pc [31:0] $end
$var wire 32 M result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module adder $end
$var wire 32 N entry1 [31:0] $end
$var wire 32 O entry0 [31:0] $end
$var reg 32 P result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module signExt $end
$var wire 16 Q ins [15:0] $end
$var wire 1 R unSign $end
$var reg 32 S result [31:0] $end
$var reg 16 T tempOnes [15:0] $end
$var reg 16 U tempZero [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module shftJump $end
$var wire 26 V in [25:0] $end
$var reg 28 W result [27:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module shftLeft $end
$var wire 32 X in [31:0] $end
$var reg 32 Y result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module simpleAND $end
$var wire 1 C Z_flag $end
$var wire 1 / branch $end
$var reg 1 Z result $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module MAR $end
$var wire 1 3 load $end
$var wire 32 [ in [31:0] $end
$var reg 32 \ hold [31:0] $end
$var reg 32 ] result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module MDR $end
$var wire 1 4 load $end
$var wire 32 ^ in [31:0] $end
$var reg 32 _ hold [31:0] $end
$var reg 32 ` result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module NPC $end
$var wire 32 a in [31:0] $end
$var wire 1 6 load $end
$var reg 32 b hold [31:0] $end
$var reg 32 c result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module funcMux $end
$var wire 6 d one [5:0] $end
$var wire 1 0 s $end
$var wire 6 e zero [5:0] $end
$var reg 6 f result [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module pcMux $end
$var wire 32 g one [31:0] $end
$var wire 1 7 s $end
$var wire 32 h zero [31:0] $end
$var reg 32 i result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Jump_Mux $end
$var wire 32 j one [31:0] $end
$var wire 1 2 s $end
$var wire 32 k zero [31:0] $end
$var reg 32 l result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module ALU_Mux $end
$var wire 32 m three [31:0] $end
$var wire 32 n zero [31:0] $end
$var wire 32 o two [31:0] $end
$var wire 2 p s [1:0] $end
$var wire 32 q one [31:0] $end
$var reg 32 r result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Register_Mux $end
$var wire 5 s one [4:0] $end
$var wire 1 9 s $end
$var wire 5 t zero [4:0] $end
$var reg 5 u result [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module mdrMux $end
$var wire 32 v one [31:0] $end
$var wire 1 w s $end
$var wire 32 x zero [31:0] $end
$var reg 32 y result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Branch_Mux $end
$var wire 32 z zero [31:0] $end
$var wire 1 Z s $end
$var wire 32 { one [31:0] $end
$var reg 32 | result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 |
bx {
b100 z
bx y
bx x
zw
bx v
bz u
bz t
bz s
bx r
b1111111111111111zzzzzzzzzzzzzzzz q
bx p
bx o
bx n
b0 m
b0zzzzzzzzzzzzzzzzzzzzzzzzzz00 l
b100 k
b0zzzzzzzzzzzzzzzzzzzzzzzzzz00 j
b0 i
bx h
b0 g
bx f
bz e
bx d
bx c
bx b
bz a
bx `
bx _
bx ^
bx ]
bx \
bx [
0Z
b11111111111111zzzzzzzzzzzzzzzz00 Y
b1111111111111111zzzzzzzzzzzzzzzz X
bz00 W
bz V
b0 U
b1111111111111111 T
b1111111111111111zzzzzzzzzzzzzzzz S
zR
bz Q
bx P
b11111111111111zzzzzzzzzzzzzzzz00 O
b100 N
b100 M
b0 L
bx K
bx J
bz I
bx H
bz G
bz F
b0 E
b0 D
0C
bx B
xA
x@
x?
bx >
b0 =
bx <
bx ;
b0 :
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
bx .
bx -
bz ,
bx +
1*
bx )
x(
x'
bx &
b0 %
bx $
x#
0"
0!
$end
#5
b1 :
b0 -
b0 d
b0 .
b0 p
b100 l
bz <
bz f
bx =
bx i
05
04
03
0(
0/
02
08
09
06
0#
01
00
07
0'
1!
#10
0!
#15
0A
0?
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
b0 ]
b0 \
b0 H
b0 ^
b0 y
b0 )
b0 >
b0 [
b0 v
b100001 <
b100001 f
b0 =
b0 i
13
10
17
1!
#20
0!
#25
b11 :
b100100000000010000000000101100 +
b100100000000010000000000101100 x
0*
03
1'
1!
#30
0!
#35
1!
#38
1*
#40
0!
#45
11
b100 :
1!
#50
0!
#55
b1 :
bx ;
bx r
bx =
bx i
bz <
bz f
1#
16
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#60
0!
#65
bx l
xA
x?
bxzzzzzzzzzzzzzzzzzzzzzzzzzz00 j
bx k
bx |
b0 ;
b0 r
bx M
bx N
bx z
bx %
bx L
bx g
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
bx =
bx i
13
10
17
1!
#70
0!
#75
b11 :
03
1!
#80
0!
#85
11
b100 :
1!
#90
0!
#95
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#100
0!
#105
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#110
0!
#115
b11 :
03
1!
#120
0!
#125
11
b100 :
1!
#130
0!
#135
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#140
0!
#145
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#150
0!
#155
b11 :
03
1!
#160
0!
#165
11
b100 :
1!
#170
0!
#175
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#180
0!
#185
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#190
0!
#195
b11 :
03
1!
#200
0!
#205
11
b100 :
1!
#210
0!
#215
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#220
0!
#225
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#230
0!
#235
b11 :
03
1!
#240
0!
#245
11
b100 :
1!
#250
0!
#255
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#260
0!
#265
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#270
0!
#275
b11 :
03
1!
#280
0!
#285
11
b100 :
1!
#290
0!
#295
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#300
0!
#305
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#310
0!
#315
b11 :
03
1!
#320
0!
#325
11
b100 :
1!
#330
0!
#335
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#340
0!
#345
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#350
0!
#355
b11 :
03
1!
#360
0!
#365
11
b100 :
1!
#370
0!
#375
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#380
0!
#385
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#390
0!
#395
b11 :
03
1!
#400
0!
#405
11
b100 :
1!
#410
0!
#415
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#420
0!
#425
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#430
0!
#435
b11 :
03
1!
#440
0!
#445
11
b100 :
1!
#450
0!
#455
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#460
0!
#465
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#470
0!
#475
b11 :
03
1!
#480
0!
#485
11
b100 :
1!
#490
0!
#495
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#500
0!
#505
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#510
0!
#515
b11 :
03
1!
#520
0!
#525
11
b100 :
1!
#530
0!
#535
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#540
0!
#545
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#550
0!
#555
b11 :
03
1!
#560
0!
#565
11
b100 :
1!
#570
0!
#575
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#580
0!
#585
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#590
0!
#595
b11 :
03
1!
#600
0!
#605
11
b100 :
1!
#610
0!
#615
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#620
0!
#625
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#630
0!
#635
b11 :
03
1!
#640
0!
#645
11
b100 :
1!
#650
0!
#655
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#660
0!
#665
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#670
0!
#675
b11 :
03
1!
#680
0!
#685
11
b100 :
1!
#690
0!
#695
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#700
0!
#705
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#710
0!
#715
b11 :
03
1!
#720
0!
#725
11
b100 :
1!
#730
0!
#735
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#740
0!
#745
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#750
0!
#755
b11 :
03
1!
#760
0!
#765
11
b100 :
1!
#770
0!
#775
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#780
0!
#785
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#790
0!
#795
b11 :
03
1!
#800
0!
#805
11
b100 :
1!
#810
0!
#815
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#820
0!
#825
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#830
0!
#835
b11 :
03
1!
#840
0!
#845
11
b100 :
1!
#850
0!
#855
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#860
0!
#865
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#870
0!
#875
b11 :
03
1!
#880
0!
#885
11
b100 :
1!
#890
0!
#895
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#900
0!
#905
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#910
0!
#915
b11 :
03
1!
#920
0!
#925
11
b100 :
1!
#930
0!
#935
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#940
0!
#945
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#950
0!
#955
b11 :
03
1!
#960
0!
#965
11
b100 :
1!
#970
0!
#975
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#980
0!
#985
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#990
0!
#995
b11 :
03
1!
#1000
0!
#1005
11
b100 :
1!
#1010
0!
#1015
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#1020
0!
#1025
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#1030
0!
#1035
b11 :
03
1!
#1040
0!
#1045
11
b100 :
1!
#1050
0!
#1055
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#1060
0!
#1065
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#1070
0!
#1075
b11 :
03
1!
#1080
0!
#1085
11
b100 :
1!
#1090
0!
#1095
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#1100
0!
#1105
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#1110
0!
#1115
b11 :
03
1!
#1120
0!
#1125
11
b100 :
1!
#1130
0!
#1135
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#1140
0!
#1145
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#1150
0!
#1155
b11 :
03
1!
#1160
0!
#1165
11
b100 :
1!
#1170
0!
#1175
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#1180
0!
#1185
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#1190
0!
#1195
b11 :
03
1!
#1200
0!
#1205
11
b100 :
1!
#1210
0!
#1215
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#1220
0!
#1225
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#1230
0!
#1235
b11 :
03
1!
#1240
0!
#1245
11
b100 :
1!
#1250
0!
#1255
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#1260
0!
#1265
b0 ;
b0 r
b10 :
b100001 -
b100001 d
b11 .
b11 p
bx ]
bx \
bx H
bx ^
bx y
bx )
bx >
bx [
bx v
b100001 <
b100001 f
13
10
17
1!
#1270
0!
#1275
b11 :
03
1!
#1280
0!
#1285
11
b100 :
1!
#1290
0!
#1295
b1 :
bx ;
bx r
bz <
bz f
b0 -
b0 d
b0 .
b0 p
07
00
01
1!
#1300
