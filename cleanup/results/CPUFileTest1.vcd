$date
	Fri Dec 14 16:49:53 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPUTester1 $end
$var reg 1 ! clk $end
$upscope $end
$scope module CPUTester1 $end
$var reg 1 " reset $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Program_Counter $end
$var wire 1 ! Clk $end
$var wire 1 # Load $end
$var wire 32 $ PCNext [31:0] $end
$var wire 1 " Reset $end
$var reg 32 % PCResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Memory $end
$var wire 32 & address [31:0] $end
$var wire 1 ' byte $end
$var wire 32 ( dataIn [31:0] $end
$var wire 1 ) memEnable $end
$var wire 1 * rw $end
$var reg 1 + MOC $end
$var reg 32 , output_destination [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Control_Unit $end
$var wire 1 ! clk $end
$var wire 6 - opCode [5:0] $end
$var wire 1 " reset $end
$var wire 1 + MOC $end
$var reg 1 * RW $end
$var reg 6 . aluCode [5:0] $end
$var reg 2 / aluSrc [1:0] $end
$var reg 1 0 branch $end
$var reg 1 ' byte $end
$var reg 1 1 immediate $end
$var reg 1 2 irLoad $end
$var reg 1 3 jump $end
$var reg 1 4 marLoad $end
$var reg 1 5 mdrLoad $end
$var reg 1 6 mdrSource $end
$var reg 1 ) memEnable $end
$var reg 1 7 npcLoad $end
$var reg 1 # pcLoad $end
$var reg 1 8 pcSelect $end
$var reg 1 9 regWrite $end
$var reg 1 : rfSource $end
$var reg 5 ; state [4:0] $end
$var reg 1 < unSign $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module alu $end
$var wire 32 = b [31:0] $end
$var wire 6 > operation [5:0] $end
$var wire 32 ? a [31:0] $end
$var reg 32 @ Result [31:0] $end
$var reg 1 A carryFlag $end
$var reg 1 B condition $end
$var reg 1 C negativeFlag $end
$var reg 1 D overFlowFlag $end
$var reg 32 E tempVar [31:0] $end
$var reg 1 F zeroFlag $end
$var integer 32 G counter [31:0] $end
$var integer 32 H index [31:0] $end
$var integer 32 I var [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Register_File $end
$var wire 5 J A_Address [4:0] $end
$var wire 5 K B_Address [4:0] $end
$var wire 1 ! Clk $end
$var wire 1 9 Write $end
$var wire 32 L C_Data [31:0] $end
$var wire 5 M C_Address [4:0] $end
$var reg 32 N A_Data [31:0] $end
$var reg 32 O B_Data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module addFour $end
$var wire 32 P pc [31:0] $end
$var wire 32 Q result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module adder $end
$var wire 32 R entry1 [31:0] $end
$var wire 32 S entry0 [31:0] $end
$var reg 32 T result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module signExt $end
$var wire 16 U ins [15:0] $end
$var wire 1 < unSign $end
$var reg 32 V result [31:0] $end
$var reg 16 W tempOnes [15:0] $end
$var reg 16 X tempZero [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module shftJump $end
$var wire 26 Y in [25:0] $end
$var reg 28 Z result [27:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module shftLeft $end
$var wire 32 [ in [31:0] $end
$var reg 32 \ result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module simpleAND $end
$var wire 1 0 branch $end
$var wire 1 B condition $end
$var reg 1 ] result $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module MAR $end
$var wire 1 4 load $end
$var wire 32 ^ in [31:0] $end
$var reg 32 _ result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module MDR $end
$var wire 1 5 load $end
$var wire 32 ` in [31:0] $end
$var reg 32 a result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module NPC $end
$var wire 32 b in [31:0] $end
$var wire 1 7 load $end
$var reg 32 c result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module IR $end
$var wire 1 2 load $end
$var wire 32 d in [31:0] $end
$var reg 32 e result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module funcMux $end
$var wire 6 f one [5:0] $end
$var wire 1 1 s $end
$var wire 6 g zero [5:0] $end
$var reg 6 h result [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module pcMux $end
$var wire 32 i one [31:0] $end
$var wire 1 8 s $end
$var wire 32 j zero [31:0] $end
$var reg 32 k result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Jump_Mux $end
$var wire 32 l one [31:0] $end
$var wire 1 3 s $end
$var wire 32 m zero [31:0] $end
$var reg 32 n result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module ALU_Mux $end
$var wire 32 o three [31:0] $end
$var wire 32 p zero [31:0] $end
$var wire 32 q two [31:0] $end
$var wire 2 r s [1:0] $end
$var wire 32 s one [31:0] $end
$var reg 32 t result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Register_Mux $end
$var wire 5 u one [4:0] $end
$var wire 1 : s $end
$var wire 5 v zero [4:0] $end
$var reg 5 w result [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module mdrMux $end
$var wire 32 x one [31:0] $end
$var wire 1 6 s $end
$var wire 32 y zero [31:0] $end
$var reg 32 z result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester1 $end
$scope module CPU_Test1 $end
$scope module Branch_Mux $end
$var wire 32 { zero [31:0] $end
$var wire 1 ] s $end
$var wire 32 | one [31:0] $end
$var reg 32 } result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 }
bx |
b100 {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
b0 o
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx n
b100 m
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx l
b0 k
bx j
b0 i
bx h
bx g
bx f
bx e
bx d
b100 c
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx b
bx a
bx `
bx _
bx ^
0]
bx \
bx [
bx Z
bx Y
b0 X
b1111111111111111 W
bx V
bx U
bx T
bx S
b0 R
b100 Q
b0 P
bx O
bx N
bx M
bx L
bx K
bx J
b0 I
bx H
b0 G
0F
bx E
xD
xC
0B
xA
bx @
b0 ?
bx >
bx =
x<
b0 ;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
bx /
bx .
bx -
bx ,
1+
x*
x)
bx (
x'
bx &
b0 %
b100 $
x#
0"
0!
$end
#5
b0 /
b0 r
b100 b
b100 n
bx ?
bx k
06
05
04
0*
03
09
0:
02
01
08
0)
0<
07
0#
0'
1!
#7
b1 ;
00
#10
0!
#15
0D
0A
b0 @
b0 ^
b0 x
b100001 >
b100001 h
b0 =
b0 t
b100001 .
b100001 f
b11 /
b11 r
b0 ?
b0 k
11
18
1!
#17
b10 ;
#20
0!
#25
xD
xA
bx @
bx ^
bx x
0+
bx ?
bx k
17
1)
08
1!
#26
b1000 b
b1000 n
b1000 m
b1000 }
b1000 Q
b1000 {
b100 %
b100 P
b100 R
b100 i
1#
#27
b11 ;
#30
0!
#35
1!
#38
1+
#40
0!
#45
0)
0#
07
1!
#46
12
#47
b100 ;
#50
0!
#55
bx =
bx t
bx >
bx h
b0 .
b0 f
b0 /
b0 r
01
02
1!
#60
0!
#65
1!
#70
0!
#75
1!
#80
0!
#85
1!
#90
0!
#95
1!
#100
0!
#105
1!
#110
0!
#115
1!
#120
0!
#125
1!
#130
0!
#135
1!
#140
0!
#145
1!
#150
0!
#155
1!
#160
0!
#165
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
#225
1!
#230
0!
#235
1!
#240
0!
#245
1!
#250
0!
#255
1!
#260
0!
#265
1!
#270
0!
#275
1!
#280
0!
#285
1!
#290
0!
#295
1!
#300
0!
#305
1!
#310
0!
#315
1!
#320
0!
#325
1!
#330
0!
#335
1!
#340
0!
#345
1!
#350
0!
#355
1!
#360
0!
#365
1!
#370
0!
#375
1!
#380
0!
#385
1!
#390
0!
#395
1!
#400
0!
#405
1!
#410
0!
#415
1!
#420
0!
#425
1!
#430
0!
#435
1!
#440
0!
#445
1!
#450
0!
#455
1!
#460
0!
#465
1!
#470
0!
#475
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
#510
0!
#515
1!
#520
0!
#525
1!
#530
0!
#535
1!
#540
0!
#545
1!
#550
0!
#555
1!
#560
0!
#565
1!
#570
0!
#575
1!
#580
0!
#585
1!
#590
0!
#595
1!
#600
0!
#605
1!
#610
0!
#615
1!
#620
0!
#625
1!
#630
0!
#635
1!
#640
0!
#645
1!
#650
0!
#655
1!
#660
0!
#665
1!
#670
0!
#675
1!
#680
0!
#685
1!
#690
0!
#695
1!
#700
0!
#705
1!
#710
0!
#715
1!
#720
0!
#725
1!
#730
0!
#735
1!
#740
0!
#745
1!
#750
0!
#755
1!
#760
0!
#765
1!
#770
0!
#775
1!
#780
0!
#785
1!
#790
0!
#795
1!
#800
0!
#805
1!
#810
0!
#815
1!
#820
0!
#825
1!
#830
0!
#835
1!
#840
0!
#845
1!
#850
0!
#855
1!
#860
0!
#865
1!
#870
0!
#875
1!
#880
0!
#885
1!
#890
0!
#895
1!
#900
0!
#905
1!
#910
0!
#915
1!
#920
0!
#925
1!
#930
0!
#935
1!
#940
0!
#945
1!
#950
0!
#955
1!
#960
0!
#965
1!
#970
0!
#975
1!
#980
0!
#985
1!
#990
0!
#995
1!
#1000
0!
#1005
1!
#1010
0!
#1015
1!
#1020
0!
#1025
1!
#1030
0!
#1035
1!
#1040
0!
#1045
1!
#1050
0!
#1055
1!
#1060
0!
#1065
1!
#1070
0!
#1075
1!
#1080
0!
#1085
1!
#1090
0!
#1095
1!
#1100
0!
#1105
1!
#1110
0!
#1115
1!
#1120
0!
#1125
1!
#1130
0!
#1135
1!
#1140
0!
#1145
1!
#1150
0!
#1155
1!
#1160
0!
#1165
1!
#1170
0!
#1175
1!
#1180
0!
#1185
1!
#1190
0!
#1195
1!
#1200
