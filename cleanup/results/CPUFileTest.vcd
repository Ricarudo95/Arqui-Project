$date
	Thu Dec 13 08:45:00 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPUTester $end
$var reg 1 ! clk $end
$upscope $end
$scope module CPUTester $end
$var reg 1 " reset $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Program_Counter $end
$var wire 1 ! Clk $end
$var wire 32 # PCNext [31:0] $end
$var wire 1 " Reset $end
$var reg 32 $ PCResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module Program_Counter $end
$var wire 1 ! Clk $end
$var wire 32 % PCNext [31:0] $end
$var wire 1 " Reset $end
$var reg 32 & PCResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Instruction_Memory $end
$var wire 1 ! Enable $end
$var wire 32 ' PC [31:0] $end
$var wire 32 ( Instruction [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Control_Unit $end
$var wire 1 ! clk $end
$var wire 6 ) opcode [5:0] $end
$var wire 1 " reset $end
$var reg 3 * aluCode [2:0] $end
$var reg 1 + alu_src $end
$var reg 1 , branch $end
$var reg 1 - jump $end
$var reg 1 . memRead $end
$var reg 1 / memWrite $end
$var reg 1 0 mem_to_reg $end
$var reg 1 1 reg_dst $end
$var reg 1 2 reg_write $end
$var reg 1 3 unSign $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module alu $end
$var wire 32 4 a [31:0] $end
$var wire 3 5 aluCode [2:0] $end
$var wire 32 6 b [31:0] $end
$var wire 6 7 operation [5:0] $end
$var reg 32 8 Result [31:0] $end
$var reg 32 9 tempVar [31:0] $end
$var reg 1 : zeroFlag $end
$var integer 32 ; counter [31:0] $end
$var integer 32 < index [31:0] $end
$var integer 32 = var [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Register_File $end
$var wire 5 > A_Address [4:0] $end
$var wire 5 ? B_Address [4:0] $end
$var wire 32 @ C_Data [31:0] $end
$var wire 1 ! Clk $end
$var wire 1 0 Write $end
$var wire 5 A C_Address [4:0] $end
$var reg 32 B A_Data [31:0] $end
$var reg 32 C B_Data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module ram $end
$var wire 32 D address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 E dataIn [31:0] $end
$var wire 1 . read $end
$var wire 1 / write $end
$var reg 32 F output_destination [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module addFour $end
$var wire 32 G pc [31:0] $end
$var wire 32 H result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module adder $end
$var wire 32 I entry1 [31:0] $end
$var wire 32 J entry0 [31:0] $end
$var reg 32 K result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module signExt $end
$var wire 16 L ins [15:0] $end
$var wire 1 3 unSign $end
$var reg 32 M result [31:0] $end
$var reg 16 N tempOnes [15:0] $end
$var reg 16 O tempZero [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module shftJump $end
$var wire 26 P in [25:0] $end
$var reg 28 Q result [27:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module shftLeft $end
$var wire 32 R in [31:0] $end
$var reg 32 S result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module simpleAND $end
$var wire 1 : Z_flag $end
$var wire 1 , branch $end
$var reg 1 T result $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Jump_Mux $end
$var wire 32 U one [31:0] $end
$var wire 1 - s $end
$var wire 32 V zero [31:0] $end
$var reg 32 W result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module ALU_Mux $end
$var wire 32 X zero [31:0] $end
$var wire 1 + s $end
$var wire 32 Y one [31:0] $end
$var reg 32 Z result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Register_Mux $end
$var wire 5 [ one [4:0] $end
$var wire 1 1 s $end
$var wire 5 \ zero [4:0] $end
$var reg 5 ] result [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module RAM_Mux $end
$var wire 1 0 s $end
$var wire 32 ^ zero [31:0] $end
$var wire 32 _ one [31:0] $end
$var reg 32 ` result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Branch_Mux $end
$var wire 32 a zero [31:0] $end
$var wire 1 T s $end
$var wire 32 b one [31:0] $end
$var reg 32 c result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 c
b10110100 b
b100 a
b101100 `
b101100 _
bx ^
b1 ]
b1 \
b0 [
b101100 Z
b101100 Y
b0 X
b100 W
b100 V
b1000000000010110000 U
0T
b10110000 S
b101100 R
b1000000000010110000 Q
b10000000000101100 P
b0 O
b1111111111111111 N
b101100 M
b101100 L
b10110100 K
b10110000 J
b100 I
b100 H
b0 G
bx F
b0 E
b101100 D
b0 C
b0 B
b1 A
b101100 @
b1 ?
b0 >
b0 =
bx <
b0 ;
0:
bx 9
b101100 8
b101100 7
b101100 6
b101 5
b0 4
13
12
01
10
0/
0.
0-
0,
1+
b101 *
b1001 )
b100100000000010000000000101100 (
b0 '
b0 &
b100 %
b0 $
b100 #
0"
0!
$end
#5
b101100 4
b101100 B
b0 C
b0 E
b0 X
b101100 8
b101100 D
b101100 _
b0 J
b0 S
bx @
bx `
b0 6
b0 Z
b1000 #
b1000 W
b0 M
b0 R
b0 Y
b100010000000000000000000 U
b100010000000000000000000 Q
b10 A
b10 ]
00
1.
0+
b1000 %
b1000 V
b1000 c
b1000 K
b1000 b
b0 L
b0 7
b1000100000000000000000 P
b10 ?
b1 >
b10 \
b100100 )
b1000 H
b1000 I
b1000 a
b10010000001000100000000000000000 (
b100 $
b100 '
b100 G
b100 &
1!
#10
0!
#15
b1010000 8
b1010000 D
b1010000 _
b10010000 J
b10010000 S
b1010000 @
b1010000 `
b100100 6
b100100 Z
b1100 %
b1100 #
b1100 W
b100100 M
b100100 R
b100100 Y
b100100000000000010010000 U
b100100000000000010010000 Q
b100 A
b100 ]
10
0.
1+
b1100 V
b1100 c
b10011100 K
b10011100 b
b100100 L
b100100 7
b1001000000000000100100 P
b100 ?
b100 \
b1001 )
b1000 &
b1100 H
b1100 I
b1100 a
b100100001001000000000000100100 (
b1000 $
b1000 '
b1000 G
1!
#20
0!
#25
b0 4
b0 B
b0 C
b0 E
b0 X
b0 @
b0 `
b0 8
b0 D
b0 _
b1010000010000100 J
b1010000010000100 S
b0 6
b0 Z
b10000 #
b10000 W
b10100000100001 M
b10100000100001 R
b10100000100001 Y
b1010000010000100 U
b1010000010000100 Q
b101 A
b101 ]
03
b0 *
b0 5
0+
11
b10000 %
b10000 V
b10000 c
b1010000010010100 K
b1010000010010100 b
b100001 7
b10100000100001 L
b101 [
b10100000100001 P
b0 ?
b0 >
b0 \
b0 )
b10000 H
b10000 I
b10000 a
b10100000100001 (
b1100 $
b1100 '
b1100 G
b1100 &
1!
#30
0!
#35
b10100 %
b10100 #
b10100 W
b10100010001010000010000100 U
b10100010001010000010000100 Q
b10100 V
b10100 c
b1010000010011000 K
b1010000010011000 b
b101000100010100000100001 P
b10 ?
b101 >
b10 \
b10000 &
b10100 H
b10100 I
b10100 a
b101000100010100000100001 (
b10000 $
b10000 '
b10000 G
1!
#40
0!
#45
b1111111111111111 @
b1111111111111111 `
b1111111111111111 8
b1111111111111111 D
b1111111111111111 _
b111111111111111100 J
b111111111111111100 S
b1111111111111111 6
b1111111111111111 Z
b11000 #
b11000 W
b1111111111111111 M
b1111111111111111 R
b1111111111111111 Y
b1100011111111111111111100 U
b1100011111111111111111100 Q
b11 A
b11 ]
13
b101 *
b101 5
1+
01
b11000 %
b11000 V
b11000 c
b1000000000000010100 K
b1000000000000010100 b
b111111 7
b1111111111111111 L
b11111 [
b11000111111111111111111 P
b11 ?
b11 >
b11 \
b1001 )
b11000 H
b11000 I
b11000 a
b100100011000111111111111111111 (
b10100 $
b10100 '
b10100 G
b10100 &
1!
#50
0!
#55
b1111111111111111 4
b1111111111111111 B
b11111111111111111111111111110100 J
b11111111111111111111111111110100 S
0T
bx @
bx `
b0 6
b0 Z
b11100 %
b11100 #
b11100 W
b11111111111111111111111111111101 M
b11111111111111111111111111111101 R
b11111111111111111111111111111101 Y
0:
b1 8
b1 D
b1 _
b1100000111111111111110100 U
b1100000111111111111110100 Q
b0 A
b0 ]
03
1,
00
b11 *
b11 5
0+
02
b11100 V
b11100 c
b10000 K
b10000 b
b1111111111111101 L
b111101 7
b11000001111111111111101 P
b0 ?
b0 \
b111 )
b11000 &
b11100 H
b11100 I
b11100 a
b11100011000001111111111111101 (
b11000 $
b11000 '
b11000 G
1!
#60
0!
#65
b0 4
b0 B
b0 J
b0 S
b0 @
b0 `
b100000 #
b100000 W
b0 8
b0 D
b0 _
b0 M
b0 R
b0 Y
b0 U
b0 Q
0,
10
b0 *
b0 5
12
11
b100000 %
b100000 V
b100000 c
b100000 K
b100000 b
b0 7
b0 L
b0 [
b0 P
b0 >
b0 )
b100000 H
b100000 I
b100000 a
b0 (
b11100 $
b11100 '
b11100 G
b11100 &
1!
#70
0!
#75
b101100 4
b101100 B
b101101 8
b101101 D
b101101 _
b100 J
b100 S
bx @
bx `
b1 6
b1 Z
b100100 %
b100100 #
b100100 W
b1 M
b1 R
b1 Y
b100101000000000000000100 U
b100101000000000000000100 Q
00
1/
b110 *
b110 5
1+
02
b100100 V
b100100 c
b101000 K
b101000 b
b1 L
b1 7
b1001010000000000000001 P
b101 ?
b1 >
b101 \
b101000 )
b100000 &
b100100 H
b100100 I
b100100 a
b10100000001001010000000000000001 (
b100000 $
b100000 '
b100000 G
1!
#80
0!
#85
1T
1:
b0 4
b0 B
b1000 J
b1000 S
b0 6
b0 Z
b110000 #
b110000 W
b10 M
b10 R
b10 Y
b1000 U
b1000 Q
1,
0/
b1 *
b1 5
0+
01
b101000 %
b110000 V
b110000 c
b110000 K
b110000 b
b10 L
b10 7
b10 P
b0 ?
b0 >
b0 \
b100 )
b101000 H
b101000 I
b101000 a
b10000000000000000000000000010 (
b100100 $
b100100 '
b100100 G
b100100 &
1!
#90
0!
#95
b11111111111111111111111111111100 J
b11111111111111111111111111111100 S
b101100 %
b110000 #
b110000 W
b111111111111111100 U
b111111111111111100 Q
b11111111111111111111111111111111 M
b11111111111111111111111111111111 R
b11111111111111111111111111111111 Y
b110000 V
b110000 c
b110000 K
b110000 b
b111111 7
b1111111111111111 P
b1111111111111111 L
b11111 [
b101000 &
b110100 H
b110100 I
b110100 a
b10000000000001111111111111111 (
b110000 $
b110000 '
b110000 G
1!
#100
0!
#105
b110000 %
b101100 &
1!
#110
0!
#115
b110100 %
b110000 &
1!
#120
0!
#125
b111000 %
b110100 &
1!
#130
0!
#135
b111100 %
b111000 &
1!
#140
0!
#145
b1000000 %
b111100 &
1!
#150
0!
#155
b1000100 %
b1000000 &
1!
#160
0!
#165
b1001000 %
b1000100 &
1!
#170
0!
#175
b1001100 %
b1001000 &
1!
#180
0!
#185
b1010000 %
b1001100 &
1!
#190
0!
#195
b1010100 %
b1010000 &
1!
#200
0!
#205
b1011000 %
b1010100 &
1!
#210
0!
#215
b1011100 %
b1011000 &
1!
#220
0!
#225
b1100000 %
b1011100 &
1!
#230
0!
#235
b1110000 %
b1100000 &
1!
#240
0!
#245
b1110100 %
b1110000 &
1!
#250
0!
#255
b1111000 %
b1110100 &
1!
#260
0!
#265
b1111100 %
b1111000 &
1!
#270
0!
#275
b10000000 %
b1111100 &
1!
#280
0!
#285
b10000100 %
b10000000 &
1!
#290
0!
#295
b10001000 %
b10000100 &
1!
#300
0!
#305
b10001100 %
b10001000 &
1!
#310
0!
#315
b10010000 %
b10001100 &
1!
#320
0!
#325
b10010100 %
b10010000 &
1!
#330
0!
#335
b10011000 %
b10010100 &
1!
#340
0!
#345
b10011100 %
b10011000 &
1!
#350
0!
#355
b10100000 %
b10011100 &
1!
#360
0!
#365
b10100100 %
b10100000 &
1!
#370
0!
#375
b10101000 %
b10100100 &
1!
#380
0!
#385
b10101100 %
b10101000 &
1!
#390
0!
#395
b10110000 %
b10101100 &
1!
#400
0!
#405
b10110100 %
b10110000 &
1!
#410
0!
#415
b10111000 %
b10110100 &
1!
#420
0!
#425
b10111100 %
b10111000 &
1!
#430
0!
#435
b11000000 %
b10111100 &
1!
#440
0!
#445
b11000100 %
b11000000 &
1!
#450
0!
#455
b11001000 %
b11000100 &
1!
#460
0!
#465
b11001100 %
b11001000 &
1!
#470
0!
#475
b11001100 %
b11001100 &
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
#510
0!
#515
1!
#520
0!
#525
1!
#530
0!
#535
1!
#540
0!
#545
1!
#550
