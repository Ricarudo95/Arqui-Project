$date
	Thu Dec 13 09:49:09 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPUTester $end
$var reg 1 ! clk $end
$upscope $end
$scope module CPUTester $end
$var reg 1 " reset $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Program_Counter $end
$var wire 1 ! Clk $end
$var wire 32 # PCNext [31:0] $end
$var wire 1 " Reset $end
$var reg 32 $ PCResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module Program_Counter $end
$var wire 1 ! Clk $end
$var wire 32 % PCNext [31:0] $end
$var wire 1 " Reset $end
$var reg 32 & PCResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module Program_Counter $end
$var wire 1 ! Clk $end
$var wire 32 ' PCNext [31:0] $end
$var wire 1 " Reset $end
$var reg 32 ( PCResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Instruction_Memory $end
$var wire 1 ! Enable $end
$var wire 32 ) PC [31:0] $end
$var wire 32 * Instruction [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module Instruction_Memory $end
$var wire 1 ! Enable $end
$var wire 32 + PC [31:0] $end
$var wire 32 , Instruction [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module Instruction_Memory $end
$var wire 1 ! Enable $end
$var wire 32 - PC [31:0] $end
$var wire 32 . Instruction [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Control_Unit $end
$var wire 1 ! clk $end
$var wire 6 / opcode [5:0] $end
$var wire 1 " reset $end
$var reg 3 0 aluCode [2:0] $end
$var reg 1 1 alu_src $end
$var reg 1 2 branch $end
$var reg 1 3 jump $end
$var reg 1 4 memRead $end
$var reg 1 5 memWrite $end
$var reg 1 6 mem_to_reg $end
$var reg 1 7 reg_dst $end
$var reg 1 8 reg_write $end
$var reg 1 9 unSign $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module Control_Unit $end
$var wire 1 ! clk $end
$var wire 6 : opcode [5:0] $end
$var wire 1 " reset $end
$var reg 3 ; aluCode [2:0] $end
$var reg 1 < alu_src $end
$var reg 1 = branch $end
$var reg 1 > jump $end
$var reg 1 ? memRead $end
$var reg 1 @ memWrite $end
$var reg 1 A mem_to_reg $end
$var reg 1 B reg_dst $end
$var reg 1 C reg_write $end
$var reg 1 D unSign $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module Control_Unit $end
$var wire 1 ! clk $end
$var wire 6 E opcode [5:0] $end
$var wire 1 " reset $end
$var reg 3 F aluCode [2:0] $end
$var reg 1 G alu_src $end
$var reg 1 H branch $end
$var reg 1 I jump $end
$var reg 1 J memRead $end
$var reg 1 K memWrite $end
$var reg 1 L mem_to_reg $end
$var reg 1 M reg_dst $end
$var reg 1 N reg_write $end
$var reg 1 O unSign $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module alu $end
$var wire 32 P a [31:0] $end
$var wire 3 Q aluCode [2:0] $end
$var wire 32 R b [31:0] $end
$var wire 6 S operation [5:0] $end
$var reg 32 T Result [31:0] $end
$var reg 32 U tempVar [31:0] $end
$var reg 1 V zeroFlag $end
$var integer 32 W counter [31:0] $end
$var integer 32 X index [31:0] $end
$var integer 32 Y var [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module alu $end
$var wire 32 Z a [31:0] $end
$var wire 3 [ aluCode [2:0] $end
$var wire 32 \ b [31:0] $end
$var wire 6 ] operation [5:0] $end
$var reg 32 ^ Result [31:0] $end
$var reg 32 _ tempVar [31:0] $end
$var reg 1 ` zeroFlag $end
$var integer 32 a counter [31:0] $end
$var integer 32 b index [31:0] $end
$var integer 32 c var [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module alu $end
$var wire 32 d a [31:0] $end
$var wire 3 e aluCode [2:0] $end
$var wire 32 f b [31:0] $end
$var wire 6 g operation [5:0] $end
$var reg 32 h Result [31:0] $end
$var reg 32 i tempVar [31:0] $end
$var reg 1 j zeroFlag $end
$var integer 32 k counter [31:0] $end
$var integer 32 l index [31:0] $end
$var integer 32 m var [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Register_File $end
$var wire 5 n A_Address [4:0] $end
$var wire 5 o B_Address [4:0] $end
$var wire 32 p C_Data [31:0] $end
$var wire 1 ! Clk $end
$var wire 1 6 Write $end
$var wire 5 q C_Address [4:0] $end
$var reg 32 r A_Data [31:0] $end
$var reg 32 s B_Data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module Register_File $end
$var wire 5 t A_Address [4:0] $end
$var wire 5 u B_Address [4:0] $end
$var wire 32 v C_Data [31:0] $end
$var wire 1 ! Clk $end
$var wire 1 A Write $end
$var wire 5 w C_Address [4:0] $end
$var reg 32 x A_Data [31:0] $end
$var reg 32 y B_Data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module Register_File $end
$var wire 5 z A_Address [4:0] $end
$var wire 5 { B_Address [4:0] $end
$var wire 32 | C_Data [31:0] $end
$var wire 1 ! Clk $end
$var wire 1 L Write $end
$var wire 5 } C_Address [4:0] $end
$var reg 32 ~ A_Data [31:0] $end
$var reg 32 !" B_Data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module ram $end
$var wire 32 "" address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 #" dataIn [31:0] $end
$var wire 1 4 read $end
$var wire 1 5 write $end
$var reg 32 $" output_destination [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module ram $end
$var wire 32 %" address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 &" dataIn [31:0] $end
$var wire 1 ? read $end
$var wire 1 @ write $end
$var reg 32 '" output_destination [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module ram $end
$var wire 32 (" address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 )" dataIn [31:0] $end
$var wire 1 J read $end
$var wire 1 K write $end
$var reg 32 *" output_destination [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module addFour $end
$var wire 32 +" pc [31:0] $end
$var wire 32 ," result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module adder $end
$var wire 32 -" entry1 [31:0] $end
$var wire 32 ." entry0 [31:0] $end
$var reg 32 /" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module addFour $end
$var wire 32 0" pc [31:0] $end
$var wire 32 1" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module adder $end
$var wire 32 2" entry1 [31:0] $end
$var wire 32 3" entry0 [31:0] $end
$var reg 32 4" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module addFour $end
$var wire 32 5" pc [31:0] $end
$var wire 32 6" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module adder $end
$var wire 32 7" entry1 [31:0] $end
$var wire 32 8" entry0 [31:0] $end
$var reg 32 9" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module signExt $end
$var wire 16 :" ins [15:0] $end
$var wire 1 9 unSign $end
$var reg 32 ;" result [31:0] $end
$var reg 16 <" tempOnes [15:0] $end
$var reg 16 =" tempZero [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module shftJump $end
$var wire 26 >" in [25:0] $end
$var reg 28 ?" result [27:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module shftLeft $end
$var wire 32 @" in [31:0] $end
$var reg 32 A" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module simpleAND $end
$var wire 1 V Z_flag $end
$var wire 1 2 branch $end
$var reg 1 B" result $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module signExt $end
$var wire 16 C" ins [15:0] $end
$var wire 1 D unSign $end
$var reg 32 D" result [31:0] $end
$var reg 16 E" tempOnes [15:0] $end
$var reg 16 F" tempZero [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module shftJump $end
$var wire 26 G" in [25:0] $end
$var reg 28 H" result [27:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module shftLeft $end
$var wire 32 I" in [31:0] $end
$var reg 32 J" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module simpleAND $end
$var wire 1 ` Z_flag $end
$var wire 1 = branch $end
$var reg 1 K" result $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module signExt $end
$var wire 16 L" ins [15:0] $end
$var wire 1 O unSign $end
$var reg 32 M" result [31:0] $end
$var reg 16 N" tempOnes [15:0] $end
$var reg 16 O" tempZero [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module shftJump $end
$var wire 26 P" in [25:0] $end
$var reg 28 Q" result [27:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module shftLeft $end
$var wire 32 R" in [31:0] $end
$var reg 32 S" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module simpleAND $end
$var wire 1 j Z_flag $end
$var wire 1 H branch $end
$var reg 1 T" result $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Jump_Mux $end
$var wire 32 U" one [31:0] $end
$var wire 1 3 s $end
$var wire 32 V" zero [31:0] $end
$var reg 32 W" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module ALU_Mux $end
$var wire 32 X" zero [31:0] $end
$var wire 1 1 s $end
$var wire 32 Y" one [31:0] $end
$var reg 32 Z" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Register_Mux $end
$var wire 5 [" one [4:0] $end
$var wire 1 7 s $end
$var wire 5 \" zero [4:0] $end
$var reg 5 ]" result [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module RAM_Mux $end
$var wire 1 6 s $end
$var wire 32 ^" zero [31:0] $end
$var wire 32 _" one [31:0] $end
$var reg 32 `" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test1 $end
$scope module Branch_Mux $end
$var wire 32 a" zero [31:0] $end
$var wire 1 B" s $end
$var wire 32 b" one [31:0] $end
$var reg 32 c" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module Jump_Mux $end
$var wire 32 d" one [31:0] $end
$var wire 1 > s $end
$var wire 32 e" zero [31:0] $end
$var reg 32 f" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module ALU_Mux $end
$var wire 32 g" zero [31:0] $end
$var wire 1 < s $end
$var wire 32 h" one [31:0] $end
$var reg 32 i" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module Register_Mux $end
$var wire 5 j" one [4:0] $end
$var wire 1 B s $end
$var wire 5 k" zero [4:0] $end
$var reg 5 l" result [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module RAM_Mux $end
$var wire 1 A s $end
$var wire 32 m" zero [31:0] $end
$var wire 32 n" one [31:0] $end
$var reg 32 o" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test2 $end
$scope module Branch_Mux $end
$var wire 32 p" zero [31:0] $end
$var wire 1 K" s $end
$var wire 32 q" one [31:0] $end
$var reg 32 r" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module Jump_Mux $end
$var wire 32 s" one [31:0] $end
$var wire 1 I s $end
$var wire 32 t" zero [31:0] $end
$var reg 32 u" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module ALU_Mux $end
$var wire 32 v" zero [31:0] $end
$var wire 1 G s $end
$var wire 32 w" one [31:0] $end
$var reg 32 x" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module Register_Mux $end
$var wire 5 y" one [4:0] $end
$var wire 1 M s $end
$var wire 5 z" zero [4:0] $end
$var reg 5 {" result [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module RAM_Mux $end
$var wire 1 L s $end
$var wire 32 |" zero [31:0] $end
$var wire 32 }" one [31:0] $end
$var reg 32 ~" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester $end
$scope module CPU_Test3 $end
$scope module Branch_Mux $end
$var wire 32 !# zero [31:0] $end
$var wire 1 T" s $end
$var wire 32 "# one [31:0] $end
$var reg 32 ## result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 ##
b10000000100 "#
b100 !#
b100000000 ~"
b100000000 }"
bx |"
b101 {"
b101 z"
b0 y"
b100000000 x"
b100000000 w"
b0 v"
b100 u"
b100 t"
b101000000010000000000 s"
b100 r"
b10001100 q"
b100 p"
b100010 o"
b100010 n"
bx m"
b1 l"
b1 k"
b0 j"
b100010 i"
b100010 h"
b0 g"
b100 f"
b100 e"
b1000000000010001000 d"
b100 c"
b10110100 b"
b100 a"
b101100 `"
b101100 _"
bx ^"
b1 ]"
b1 \"
b0 ["
b101100 Z"
b101100 Y"
b0 X"
b100 W"
b100 V"
b1000000000010110000 U"
0T"
b10000000000 S"
b100000000 R"
b101000000010000000000 Q"
b1010000000100000000 P"
b0 O"
b1111111111111111 N"
b100000000 M"
b100000000 L"
0K"
b10001000 J"
b100010 I"
b1000000000010001000 H"
b10000000000100010 G"
b0 F"
b1111111111111111 E"
b100010 D"
b100010 C"
0B"
b10110000 A"
b101100 @"
b1000000000010110000 ?"
b10000000000101100 >"
b0 ="
b1111111111111111 <"
b101100 ;"
b101100 :"
b10000000100 9"
b10000000000 8"
b100 7"
b100 6"
b0 5"
b10001100 4"
b10001000 3"
b100 2"
b100 1"
b0 0"
b10110100 /"
b10110000 ."
b100 -"
b100 ,"
b0 +"
bx *"
b0 )"
b100000000 ("
bx '"
b0 &"
b100010 %"
bx $"
b0 #"
b101100 ""
b0 !"
b0 ~
b101 }
b100000000 |
b101 {
b0 z
b0 y
b0 x
b1 w
b100010 v
b1 u
b0 t
b0 s
b0 r
b1 q
b101100 p
b1 o
b0 n
b0 m
bx l
b0 k
0j
bx i
b100000000 h
b0 g
b100000000 f
b101 e
b0 d
b0 c
bx b
b0 a
0`
bx _
b100010 ^
b100010 ]
b100010 \
b101 [
b0 Z
b0 Y
bx X
b0 W
0V
bx U
b101100 T
b101100 S
b101100 R
b101 Q
b0 P
1O
1N
0M
1L
0K
0J
0I
0H
1G
b101 F
b1001 E
1D
1C
0B
1A
0@
0?
0>
0=
1<
b101 ;
b1001 :
19
18
07
16
05
04
03
02
11
b101 0
b1001 /
b100100000001010000000100000000 .
b0 -
b100100000000010000000000100010 ,
b0 +
b100100000000010000000000101100 *
b0 )
b0 (
b100 '
b0 &
b100 %
b0 $
b100 #
0"
0!
$end
#5
b101100 P
b101100 r
b100000000 d
b100000000 ~
b0 s
b0 #"
b0 X"
b0 y
b0 &"
b0 g"
b0 !"
b0 )"
b0 v"
b11011100 v
b11011100 o"
b101100 T
b101100 ""
b101100 _"
b11011100 ^
b11011100 %"
b11011100 n"
b0 ."
b0 A"
bx p
bx `"
b0 R
b0 Z"
b11011100 \
b11011100 i"
b1101110000 3"
b1101110000 J"
b11000000 8"
b11000000 S"
b0 f
b0 x"
b1000 #
b1000 W"
b0 ;"
b0 @"
b0 Y"
b100010000000000000000000 U"
b100010000000000000000000 ?"
b10 q
b10 ]"
06
14
01
b1000 %
b1000 f"
b11011100 D"
b11011100 I"
b11011100 h"
b100000000001101110000 d"
b100000000001101110000 H"
b100 w
b100 l"
b1000 '
b1000 u"
b110000 M"
b110000 R"
b110000 w"
b10100000000000000011000000 s"
b10100000000000000011000000 Q"
b0 }
b0 {"
0O
b0 F
b0 e
0G
1M
b1000 V"
b1000 c"
b1000 /"
b1000 b"
b0 :"
b0 S
b1000100000000000000000 >"
b10 o
b1 n
b10 \"
b100100 /
b1000 e"
b1000 r"
b1101111000 4"
b1101111000 q"
b11011100 C"
b11100 ]
b1000000000011011100 G"
b100 u
b100 k"
b1000 t"
b1000 ##
b11001000 9"
b11001000 "#
b110000 g
b110000 L"
b101000000000000000110000 P"
b0 {
b101 z
b0 z"
b0 E
b1000 ,"
b1000 -"
b1000 a"
b10010000001000100000000000000000 *
b100 $
b100 )
b100 +"
b1000 1"
b1000 2"
b1000 p"
b100100000001000000000011011100 ,
b100 &
b100 +
b100 0"
b1000 6"
b1000 7"
b1000 !#
b101000000000000000110000 .
b100 (
b100 -
b100 5"
0!
#10
b0 d
b0 ~
b11011100 y
b11011100 &"
b11011100 g"
b1011000 |
b1011000 ~"
b11011100 v
b11011100 o"
b1011000 h
b1011000 ("
b1011000 }"
b11011100 ^
b11011100 %"
b11011100 n"
b1010000 T
b1010000 ""
b1010000 _"
b101100000 8"
b101100000 S"
b1011000 f
b1011000 x"
b10100000010010100 3"
b10100000010010100 J"
b11011100 \
b11011100 i"
b10010000 ."
b10010000 A"
b1010000 p
b1010000 `"
b100100 R
b100100 Z"
b1100 '
b1100 u"
b1011000 M"
b1011000 R"
b1011000 w"
b1010000000000101100000 s"
b1010000000000101100000 Q"
b1010 }
b1010 {"
1O
b101 F
b101 e
1G
0M
b1100 %
b1100 f"
b100010100000010010100 d"
b100010100000010010100 H"
b101000000100101 D"
b101000000100101 I"
b101000000100101 h"
b1010 w
b1010 l"
0D
b0 ;
b0 [
0<
1B
b1100 #
b1100 W"
b100100 ;"
b100100 @"
b100100 Y"
b100100000000000010010000 U"
b100100000000000010010000 ?"
b100 q
b100 ]"
16
04
11
b1100 t"
b1100 ##
b101101100 9"
b101101100 "#
b1011000 L"
b11000 g
b10100000000001011000 P"
b1010 {
b0 z
b1010 z"
b1001 E
b1100 e"
b1100 r"
b10100000010100000 4"
b10100000010100000 q"
b100101 ]
b1000101000000100101 G"
b101000000100101 C"
b1010 j"
b0 :
b1100 V"
b1100 c"
b10011100 /"
b10011100 b"
b100100 :"
b100100 S
b1001000000000000100100 >"
b100 o
b100 \"
b1001 /
b1100 6"
b1100 7"
b1100 !#
b100100000010100000000001011000 .
b1000 (
b1000 -
b1000 5"
b1100 1"
b1100 2"
b1100 p"
b1000101000000100101 ,
b1000 &
b1000 +
b1000 0"
b1100 ,"
b1100 -"
b1100 a"
b100100001001000000000000100100 *
b1000 $
b1000 )
b1000 +"
0!
#15
b0 \
b0 i"
b11011100 ^
b11011100 %"
b11011100 n"
b0 P
b0 r
b0 y
b0 &"
b0 g"
b11011100 Z
b11011100 x
b0 s
b0 #"
b0 X"
b0 !"
b0 )"
b0 v"
b0 p
b0 `"
b0 T
b0 ""
b0 _"
b1010000010000100 ."
b1010000010000100 A"
b0 R
b0 Z"
b0 3"
b0 J"
bx v
bx o"
b10000 #
b10000 W"
b10100000100001 ;"
b10100000100001 @"
b10100000100001 Y"
b1010000010000100 U"
b1010000010000100 ?"
b101 q
b101 ]"
09
b0 0
b0 Q
01
17
b10000 %
b10000 f"
b0 D"
b0 I"
b0 h"
b0 w
b0 l"
b101000011000000000000000000 d"
b101000011000000000000000000 H"
0A
1@
b101 ;
b101 [
0C
b10000 '
b10000 u"
b100000000000101100000 s"
b100000000000101100000 Q"
b100 }
b100 {"
b10000 V"
b10000 c"
b1010000010010100 /"
b1010000010010100 b"
b100001 S
b10100000100001 :"
b101 ["
b10100000100001 >"
b0 o
b0 n
b0 \"
b0 /
b10000 e"
b10000 r"
b10000 4"
b10000 q"
b0 ]
b0 C"
b0 j"
b11 u
b11 k"
b1010000110000000000000000 G"
b1010 t
b100011 :
b10000 t"
b10000 ##
b101110000 9"
b101110000 "#
b1000000000001011000 P"
b100 {
b100 z"
b10000 ,"
b10000 -"
b10000 a"
b10100000100001 *
b1100 $
b1100 )
b1100 +"
b10000 1"
b10000 2"
b10000 p"
b10001101010000110000000000000000 ,
b1100 &
b1100 +
b1100 0"
b10000 6"
b10000 7"
b10000 !#
b100100000001000000000001011000 .
b1100 (
b1100 -
b1100 5"
0!
#20
b11011100 y
b11011100 &"
b11011100 g"
b100000000 !"
b100000000 )"
b100000000 v"
b1011000 d
b1011000 ~
b101011000 h
b101011000 ("
b101011000 }"
b11100000 ^
b11100000 %"
b11100000 n"
b0 8"
b0 S"
bx |
bx ~"
b100000000 f
b100000000 x"
b10000 3"
b10000 J"
b11100000 v
b11100000 o"
b100 \
b100 i"
b10100 '
b10100 u"
b0 M"
b0 R"
b0 w"
b101 }
b101 {"
b101000101000000000000000000 s"
b101000101000000000000000000 Q"
0O
0L
1K
0G
0N
b10100 %
b10100 f"
b100 D"
b100 I"
b100 h"
b101001010000000000000010000 d"
b101001010000000000000010000 H"
b1010 w
b1010 l"
1D
1A
0@
1<
1C
0B
b10100 #
b10100 W"
b10100010001010000010000100 U"
b10100010001010000010000100 ?"
b10100 t"
b10100 ##
b10100 9"
b10100 "#
b0 L"
b0 g
b101 {
b101 z"
b1010001010000000000000000 P"
b1010 z
b101011 E
b10100 e"
b10100 r"
b100100 4"
b100100 q"
b100 C"
b100 ]
b1010010100000000000000100 G"
b1010 u
b1010 k"
b1001 :
b10100 V"
b10100 c"
b1010000010011000 /"
b1010000010011000 b"
b101000100010100000100001 >"
b10 o
b101 n
b10 \"
b10100 6"
b10100 7"
b10100 !#
b10101101010001010000000000000000 .
b10000 (
b10000 -
b10000 5"
b10100 1"
b10100 2"
b10100 p"
b100101010010100000000000000100 ,
b10000 &
b10000 +
b10000 0"
b10100 ,"
b10100 -"
b10100 a"
b101000100010100000100001 *
b10000 $
b10000 )
b10000 +"
0!
#25
b1011000 !"
b1011000 )"
b1011000 v"
b0 y
b0 &"
b0 g"
b100010 Z
b100010 x
b1111111111111111 p
b1111111111111111 `"
b100010 v
b100010 o"
b1111111111111111 T
b1111111111111111 ""
b1111111111111111 _"
b100010 ^
b100010 %"
b100010 n"
b1011100 h
b1011100 ("
b1011100 }"
b111111111111111100 ."
b111111111111111100 A"
b1111111111111111 R
b1111111111111111 Z"
b100000010000100 3"
b100000010000100 J"
b0 \
b0 i"
b10000 8"
b10000 S"
b1011100 |
b1011100 ~"
b100 f
b100 x"
b11000 #
b11000 W"
b1111111111111111 ;"
b1111111111111111 @"
b1111111111111111 Y"
b1100011111111111111111100 U"
b1100011111111111111111100 ?"
b11 q
b11 ]"
19
b101 0
b101 Q
11
07
b11000 %
b11000 f"
b1000000100001 D"
b1000000100001 I"
b1000000100001 h"
b10 w
b10 l"
b100011000100000010000100 d"
b100011000100000010000100 H"
0D
b0 ;
b0 [
0<
1B
b11000 '
b11000 u"
b100 M"
b100 R"
b100 w"
b101001010000000000000010000 s"
b101001010000000000000010000 Q"
b1010 }
b1010 {"
1O
1L
0K
1G
1N
b11000 V"
b11000 c"
b1000000000000010100 /"
b1000000000000010100 b"
b111111 S
b1111111111111111 :"
b11111 ["
b11000111111111111111111 >"
b11 o
b11 n
b11 \"
b1001 /
b11000 e"
b11000 r"
b100000010011100 4"
b100000010011100 q"
b100001 ]
b1000000100001 C"
b10 j"
b11 u
b11 k"
b1000110001000000100001 G"
b1 t
b0 :
b11000 t"
b11000 ##
b101000 9"
b101000 "#
b100 L"
b100 g
b1010010100000000000000100 P"
b1010 {
b1010 z"
b1001 E
b11000 ,"
b11000 -"
b11000 a"
b100100011000111111111111111111 *
b10100 $
b10100 )
b10100 +"
b11000 1"
b11000 2"
b11000 p"
b1000110001000000100001 ,
b10100 &
b10100 +
b10100 0"
b11000 6"
b11000 7"
b11000 !#
b100101010010100000000000000100 .
b10100 (
b10100 -
b10100 5"
0!
#30
b100010 v
b100010 o"
b100010 \
b100010 i"
b100010 ^
b100010 %"
b100010 n"
b0 !"
b0 )"
b0 v"
b100010 y
b100010 &"
b100010 g"
b0 Z
b0 x
b1111111111111111 P
b1111111111111111 r
b1011000 h
b1011000 ("
b1011000 }"
b11111111111111111111111111110000 8"
b11111111111111111111111111110000 S"
bx |
bx ~"
b0 f
b0 x"
b1010000010010100 3"
b1010000010010100 J"
b11111111111111111111111111110100 ."
b11111111111111111111111111110100 A"
0B"
bx p
bx `"
b0 R
b0 Z"
b11100 '
b11100 u"
b11111111111111111111111111111100 M"
b11111111111111111111111111111100 R"
b11111111111111111111111111111100 w"
b1100 }
b1100 {"
b10001100111111111111110000 s"
b10001100111111111111110000 Q"
0O
0L
1K
0G
0N
b11100 %
b11100 f"
b10100000100101 D"
b10100000100101 I"
b10100000100101 h"
b10001010000010010100 d"
b10001010000010010100 H"
b101 w
b101 l"
b11100 #
b11100 W"
b11111111111111111111111111111101 ;"
b11111111111111111111111111111101 @"
b11111111111111111111111111111101 Y"
0V
b1 T
b1 ""
b1 _"
b1100000111111111111110100 U"
b1100000111111111111110100 ?"
b0 q
b0 ]"
09
12
06
b11 0
b11 Q
01
08
b11100 t"
b11100 ##
b1100 9"
b1100 "#
b111100 g
b1111111111111100 L"
b11111 y"
b1100 {
b1100 z"
b100011001111111111111100 P"
b100 z
b100011 E
b11100 e"
b11100 r"
b1010000010110000 4"
b1010000010110000 q"
b100101 ]
b10100000100101 C"
b101 j"
b100010100000100101 G"
b10 u
b0 t
b10 k"
b11100 V"
b11100 c"
b10000 /"
b10000 b"
b1111111111111101 :"
b111101 S
b11000001111111111111101 >"
b0 o
b0 \"
b111 /
b11100 6"
b11100 7"
b11100 !#
b10001100100011001111111111111100 .
b11000 (
b11000 -
b11000 5"
b11100 1"
b11100 2"
b11100 p"
b100010100000100101 ,
b11000 &
b11000 +
b11000 0"
b11100 ,"
b11100 -"
b11100 a"
b11100011000001111111111111101 *
b11000 $
b11000 )
b11000 +"
0!
#35
b100000010 ^
b100000010 %"
b100000010 n"
b0 P
b0 r
b11100000 Z
b11100000 x
b0 ."
b0 A"
b0 p
b0 `"
b0 3"
b0 J"
bx v
bx o"
b11111111111111111111111111100000 8"
b11111111111111111111111111100000 S"
b100000 #
b100000 W"
b0 T
b0 ""
b0 _"
b0 ;"
b0 @"
b0 Y"
b0 U"
b0 ?"
02
16
b0 0
b0 Q
18
17
b100000 %
b100000 f"
b0 D"
b0 I"
b0 h"
b0 w
b0 l"
b101000101000000000000000000 d"
b101000101000000000000000000 H"
0A
1@
b101 ;
b101 [
0C
b100000 '
b100000 u"
b11111111111111111111111111111000 M"
b11111111111111111111111111111000 R"
b11111111111111111111111111111000 w"
b10001011111111111111100000 s"
b10001011111111111111100000 Q"
b1011 }
b1011 {"
b100000 V"
b100000 c"
b100000 /"
b100000 b"
b0 S
b0 :"
b0 ["
b0 >"
b0 n
b0 /
b100000 e"
b100000 r"
b100000 4"
b100000 q"
b0 ]
b0 C"
b0 j"
b101 u
b101 k"
b1010001010000000000000000 G"
b1010 t
b101011 :
b100000 t"
b100000 ##
b0 9"
b0 "#
b1111111111111000 L"
b111000 g
b100010111111111111111000 P"
b1011 {
b1011 z"
b100000 ,"
b100000 -"
b100000 a"
b0 *
b11100 $
b11100 )
b11100 +"
b100000 1"
b100000 2"
b100000 p"
b10101101010001010000000000000000 ,
b11100 &
b11100 +
b11100 0"
b100000 6"
b100000 7"
b100000 !#
b10001100100010111111111111111000 .
b11100 (
b11100 -
b11100 5"
0!
#40
1j
b0 h
b0 ("
b0 }"
b0 d
b0 ~
b11100000 y
b11100000 &"
b11100000 g"
b101100 P
b101100 r
b11100100 ^
b11100100 %"
b11100100 n"
b101101 T
b101101 ""
b101101 _"
b100000010000000 8"
b100000010000000 S"
b0 |
b0 ~"
b10000 3"
b10000 J"
b11100100 v
b11100100 o"
b100 \
b100 i"
b100 ."
b100 A"
bx p
bx `"
b1 R
b1 Z"
b100100 '
b100100 u"
b1000000100000 M"
b1000000100000 R"
b1000000100000 w"
b10 }
b10 {"
b110001011000100000010000000 s"
b110001011000100000010000000 Q"
1L
0K
b0 F
b0 e
1N
1M
b100100 %
b100100 f"
b100 D"
b100 I"
b100 h"
b101001010000000000000010000 d"
b101001010000000000000010000 H"
b1010 w
b1010 l"
1D
1A
0@
1<
1C
0B
b100100 #
b100100 W"
b1 ;"
b1 @"
b1 Y"
b100101000000000000000100 U"
b100101000000000000000100 ?"
06
15
b110 0
b110 Q
11
08
b100100 t"
b100100 ##
b100000010100100 9"
b100000010100100 "#
b100000 g
b1000000100000 L"
b10 y"
b1100010110001000000100000 P"
b1100 z
b0 E
b100100 e"
b100100 r"
b110100 4"
b110100 q"
b100 C"
b100 ]
b1010010100000000000000100 G"
b1010 u
b1010 k"
b1001 :
b100100 V"
b100100 c"
b101000 /"
b101000 b"
b1 :"
b1 S
b1001010000000000000001 >"
b101 o
b1 n
b101 \"
b101000 /
b100100 6"
b100100 7"
b100100 !#
b1100010110001000000100000 .
b100000 (
b100000 -
b100000 5"
b100100 1"
b100100 2"
b100100 p"
b100101010010100000000000000100 ,
b100000 &
b100000 +
b100000 0"
b100100 ,"
b100100 -"
b100100 a"
b10100000001001010000000000000001 *
b100000 $
b100000 )
b100000 +"
0!
#45
1B"
1V
b100000000 f
b100000000 x"
b101011100 h
b101011100 ("
b101011100 }"
b0 P
b0 r
b100000000 !"
b100000000 )"
b100000000 v"
b1011100 d
b1011100 ~
b100010 y
b100010 &"
b100010 g"
b100010 Z
b100010 x
b1000 ."
b1000 A"
b0 R
b0 Z"
b1010000010001100 3"
b1010000010001100 J"
b100010 \
b100010 i"
b0 8"
b0 S"
bx |
bx ~"
b110000 #
b110000 W"
b10 ;"
b10 @"
b10 Y"
b1000 U"
b1000 ?"
12
05
b1 0
b1 Q
01
07
b101000 %
b101000 f"
b10100000100011 D"
b10100000100011 I"
b10100000100011 h"
b101 w
b101 l"
b100010001010000010001100 d"
b100010001010000010001100 H"
0D
b0 ;
b0 [
0<
1B
b101000 '
b101000 u"
b0 M"
b0 R"
b0 w"
b101000101000000000000000000 s"
b101000101000000000000000000 Q"
b0 }
b0 {"
0L
1K
b101 F
b101 e
0N
b110000 V"
b110000 c"
b110000 /"
b110000 b"
b10 :"
b10 S
b10 >"
b0 o
b0 n
b0 \"
b100 /
b101000 e"
b101000 r"
b1010000010110100 4"
b1010000010110100 q"
b100011 ]
b10100000100011 C"
b101 j"
b10 u
b10 k"
b1000100010100000100011 G"
b1 t
b0 :
b101000 t"
b101000 ##
b101000 9"
b101000 "#
b0 g
b0 L"
b0 y"
b1010001010000000000000000 P"
b101 {
b1010 z
b101 z"
b101011 E
b101000 ,"
b101000 -"
b101000 a"
b10000000000000000000000000010 *
b100100 $
b100100 )
b100100 +"
b101000 1"
b101000 2"
b101000 p"
b1000100010100000100011 ,
b100100 &
b100100 +
b100100 0"
b101000 6"
b101000 7"
b101000 !#
b10101101010001010000000000000000 .
b100100 (
b100100 -
b100100 5"
0!
#50
b11100100 \
b11100100 i"
b1011100 !"
b1011100 )"
b1011100 v"
b11100100 y
b11100100 &"
b11100100 g"
b11100100 Z
b11100100 x
b1100000 h
b1100000 ("
b1100000 }"
b10000 8"
b10000 S"
b1100000 |
b1100000 ~"
b100 f
b100 x"
b0 3"
b0 J"
bx v
bx o"
b11111111111111111111111111111100 ."
b11111111111111111111111111111100 A"
b101100 '
b101100 u"
b100 M"
b100 R"
b100 w"
b101001010000000000000010000 s"
b101001010000000000000010000 Q"
b1010 }
b1010 {"
1O
1L
0K
1G
1N
0M
b101100 %
b101100 f"
b111001000 ^
b111001000 %"
b111001000 n"
b0 D"
b0 I"
b0 h"
b0 w
b0 l"
b101000101000000000000000000 d"
b101000101000000000000000000 H"
0A
1@
b101 ;
b101 [
0C
b110000 #
b110000 W"
b111111111111111100 U"
b111111111111111100 ?"
b11111111111111111111111111111111 ;"
b11111111111111111111111111111111 @"
b11111111111111111111111111111111 Y"
b101100 t"
b101100 ##
b111100 9"
b111100 "#
b100 L"
b100 g
b1010010100000000000000100 P"
b1010 {
b1010 z"
b1001 E
b101100 e"
b101100 r"
b101100 4"
b101100 q"
b0 ]
b0 C"
b0 j"
b101 u
b101 k"
b1010001010000000000000000 G"
b1010 t
b101011 :
b110000 V"
b110000 c"
b110000 /"
b110000 b"
b111111 S
b1111111111111111 >"
b1111111111111111 :"
b11111 ["
b101100 6"
b101100 7"
b101100 !#
b100101010010100000000000000100 .
b101000 (
b101000 -
b101000 5"
b101100 1"
b101100 2"
b101100 p"
b10101101010001010000000000000000 ,
b101000 &
b101000 +
b101000 0"
b110100 ,"
b110100 -"
b110100 a"
b10000000000001111111111111111 *
b110000 $
b110000 )
b110000 +"
1!
