$date
	Thu Dec 13 10:56:23 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPUTester3 $end
$var reg 1 ! clk $end
$upscope $end
$scope module CPUTester3 $end
$var reg 1 " reset $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module Program_Counter $end
$var wire 1 ! Clk $end
$var wire 32 # PCNext [31:0] $end
$var wire 1 " Reset $end
$var reg 32 $ PCResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module Instruction_Memory $end
$var wire 1 ! Enable $end
$var wire 32 % PC [31:0] $end
$var wire 32 & Instruction [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module Control_Unit $end
$var wire 1 ! clk $end
$var wire 6 ' opcode [5:0] $end
$var wire 1 " reset $end
$var reg 3 ( aluCode [2:0] $end
$var reg 1 ) alu_src $end
$var reg 1 * branch $end
$var reg 1 + jump $end
$var reg 1 , memRead $end
$var reg 1 - memWrite $end
$var reg 1 . mem_to_reg $end
$var reg 1 / reg_dst $end
$var reg 1 0 reg_write $end
$var reg 1 1 unSign $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module alu $end
$var wire 32 2 a [31:0] $end
$var wire 3 3 aluCode [2:0] $end
$var wire 32 4 b [31:0] $end
$var wire 6 5 operation [5:0] $end
$var reg 32 6 Result [31:0] $end
$var reg 32 7 tempVar [31:0] $end
$var reg 1 8 zeroFlag $end
$var integer 32 9 counter [31:0] $end
$var integer 32 : index [31:0] $end
$var integer 32 ; var [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module Register_File $end
$var wire 5 < A_Address [4:0] $end
$var wire 5 = B_Address [4:0] $end
$var wire 32 > C_Data [31:0] $end
$var wire 1 ! Clk $end
$var wire 1 . Write $end
$var wire 5 ? C_Address [4:0] $end
$var reg 32 @ A_Data [31:0] $end
$var reg 32 A B_Data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module ram $end
$var wire 32 B address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 C dataIn [31:0] $end
$var wire 1 , read $end
$var wire 1 - write $end
$var reg 32 D output_destination [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module addFour $end
$var wire 32 E pc [31:0] $end
$var wire 32 F result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module adder $end
$var wire 32 G entry1 [31:0] $end
$var wire 32 H entry0 [31:0] $end
$var reg 32 I result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module signExt $end
$var wire 16 J ins [15:0] $end
$var wire 1 1 unSign $end
$var reg 32 K result [31:0] $end
$var reg 16 L tempOnes [15:0] $end
$var reg 16 M tempZero [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module shftJump $end
$var wire 26 N in [25:0] $end
$var reg 28 O result [27:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module shftLeft $end
$var wire 32 P in [31:0] $end
$var reg 32 Q result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module simpleAND $end
$var wire 1 8 Z_flag $end
$var wire 1 * branch $end
$var reg 1 R result $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module Jump_Mux $end
$var wire 32 S one [31:0] $end
$var wire 1 + s $end
$var wire 32 T zero [31:0] $end
$var reg 32 U result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module ALU_Mux $end
$var wire 32 V zero [31:0] $end
$var wire 1 ) s $end
$var wire 32 W one [31:0] $end
$var reg 32 X result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module Register_Mux $end
$var wire 5 Y one [4:0] $end
$var wire 1 / s $end
$var wire 5 Z zero [4:0] $end
$var reg 5 [ result [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module RAM_Mux $end
$var wire 1 . s $end
$var wire 32 \ zero [31:0] $end
$var wire 32 ] one [31:0] $end
$var reg 32 ^ result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTester3 $end
$scope module CPU_Test1 $end
$scope module Branch_Mux $end
$var wire 32 _ zero [31:0] $end
$var wire 1 R s $end
$var wire 32 ` one [31:0] $end
$var reg 32 a result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 a
b10000000100 `
b100 _
b100000000 ^
b100000000 ]
bx \
b101 [
b101 Z
b0 Y
b100000000 X
b100000000 W
b0 V
b100 U
b100 T
b101000000010000000000 S
0R
b10000000000 Q
b100000000 P
b101000000010000000000 O
b1010000000100000000 N
b0 M
b1111111111111111 L
b100000000 K
b100000000 J
b10000000100 I
b10000000000 H
b100 G
b100 F
b0 E
bx D
b0 C
b100000000 B
b0 A
b0 @
b101 ?
b100000000 >
b101 =
b0 <
b0 ;
bx :
b0 9
08
bx 7
b100000000 6
b0 5
b100000000 4
b101 3
b0 2
11
10
0/
1.
0-
0,
0+
0*
1)
b101 (
b1001 '
b100100000001010000000100000000 &
b0 %
b0 $
b100 #
0"
0!
$end
#5
b100000000 2
b100000000 @
b0 A
b0 C
b0 V
b11000000 H
b11000000 Q
b0 4
b0 X
b1000 #
b1000 U
b110000 K
b110000 P
b110000 W
b10100000000000000011000000 S
b10100000000000000011000000 O
b0 ?
b0 [
01
b0 (
b0 3
0)
1/
b1000 T
b1000 a
b11001000 I
b11001000 `
b110000 5
b110000 J
b101000000000000000110000 N
b0 =
b101 <
b0 Z
b0 '
b1000 F
b1000 G
b1000 _
b101000000000000000110000 &
b100 $
b100 %
b100 E
0!
#10
b0 2
b0 @
b1011000 >
b1011000 ^
b1011000 6
b1011000 B
b1011000 ]
b101100000 H
b101100000 Q
b1011000 4
b1011000 X
b1100 #
b1100 U
b1011000 K
b1011000 P
b1011000 W
b1010000000000101100000 S
b1010000000000101100000 O
b1010 ?
b1010 [
11
b101 (
b101 3
1)
0/
b1100 T
b1100 a
b101101100 I
b101101100 `
b1011000 J
b11000 5
b10100000000001011000 N
b1010 =
b0 <
b1010 Z
b1001 '
b1100 F
b1100 G
b1100 _
b100100000010100000000001011000 &
b1000 $
b1000 %
b1000 E
0!
#15
b0 A
b0 C
b0 V
b10000 #
b10000 U
b100000000000101100000 S
b100000000000101100000 O
b100 ?
b100 [
b10000 T
b10000 a
b101110000 I
b101110000 `
b1000000000001011000 N
b100 =
b100 Z
b10000 F
b10000 G
b10000 _
b100100000001000000000001011000 &
b1100 $
b1100 %
b1100 E
0!
#20
b100000000 A
b100000000 C
b100000000 V
b1011000 2
b1011000 @
b101011000 6
b101011000 B
b101011000 ]
b0 H
b0 Q
bx >
bx ^
b100000000 4
b100000000 X
b10100 #
b10100 U
b0 K
b0 P
b0 W
b101 ?
b101 [
b101000101000000000000000000 S
b101000101000000000000000000 O
01
0.
1-
0)
00
b10100 T
b10100 a
b10100 I
b10100 `
b0 J
b0 5
b101 =
b101 Z
b1010001010000000000000000 N
b1010 <
b101011 '
b10100 F
b10100 G
b10100 _
b10101101010001010000000000000000 &
b10000 $
b10000 %
b10000 E
0!
#25
b1011000 A
b1011000 C
b1011000 V
b1011100 6
b1011100 B
b1011100 ]
b10000 H
b10000 Q
b1011100 >
b1011100 ^
b100 4
b100 X
b11000 #
b11000 U
b100 K
b100 P
b100 W
b101001010000000000000010000 S
b101001010000000000000010000 O
b1010 ?
b1010 [
11
1.
0-
1)
10
b11000 T
b11000 a
b101000 I
b101000 `
b100 J
b100 5
b1010010100000000000000100 N
b1010 =
b1010 Z
b1001 '
b11000 F
b11000 G
b11000 _
b100101010010100000000000000100 &
b10100 $
b10100 %
b10100 E
0!
#30
b0 A
b0 C
b0 V
b1011000 6
b1011000 B
b1011000 ]
b11111111111111111111111111110000 H
b11111111111111111111111111110000 Q
bx >
bx ^
b0 4
b0 X
b11100 #
b11100 U
b11111111111111111111111111111100 K
b11111111111111111111111111111100 P
b11111111111111111111111111111100 W
b1100 ?
b1100 [
b10001100111111111111110000 S
b10001100111111111111110000 O
01
0.
1-
0)
00
b11100 T
b11100 a
b1100 I
b1100 `
b111100 5
b1111111111111100 J
b11111 Y
b1100 =
b1100 Z
b100011001111111111111100 N
b100 <
b100011 '
b11100 F
b11100 G
b11100 _
b10001100100011001111111111111100 &
b11000 $
b11000 %
b11000 E
0!
#35
b11111111111111111111111111100000 H
b11111111111111111111111111100000 Q
b100000 #
b100000 U
b11111111111111111111111111111000 K
b11111111111111111111111111111000 P
b11111111111111111111111111111000 W
b10001011111111111111100000 S
b10001011111111111111100000 O
b1011 ?
b1011 [
b100000 T
b100000 a
b0 I
b0 `
b1111111111111000 J
b111000 5
b100010111111111111111000 N
b1011 =
b1011 Z
b100000 F
b100000 G
b100000 _
b10001100100010111111111111111000 &
b11100 $
b11100 %
b11100 E
0!
#40
18
b0 6
b0 B
b0 ]
b0 2
b0 @
b100000010000000 H
b100000010000000 Q
b0 >
b0 ^
b100100 #
b100100 U
b1000000100000 K
b1000000100000 P
b1000000100000 W
b10 ?
b10 [
b110001011000100000010000000 S
b110001011000100000010000000 O
1.
0-
b0 (
b0 3
10
1/
b100100 T
b100100 a
b100000010100100 I
b100000010100100 `
b100000 5
b1000000100000 J
b10 Y
b1100010110001000000100000 N
b1100 <
b0 '
b100100 F
b100100 G
b100100 _
b1100010110001000000100000 &
b100000 $
b100000 %
b100000 E
0!
#45
b100000000 4
b100000000 X
b101011100 6
b101011100 B
b101011100 ]
b100000000 A
b100000000 C
b100000000 V
b1011100 2
b1011100 @
b0 H
b0 Q
bx >
bx ^
b101000 #
b101000 U
b0 K
b0 P
b0 W
b101000101000000000000000000 S
b101000101000000000000000000 O
b0 ?
b0 [
0.
1-
b101 (
b101 3
00
b101000 T
b101000 a
b101000 I
b101000 `
b0 5
b0 J
b0 Y
b1010001010000000000000000 N
b101 =
b1010 <
b101 Z
b101011 '
b101000 F
b101000 G
b101000 _
b10101101010001010000000000000000 &
b100100 $
b100100 %
b100100 E
0!
#50
b1011100 A
b1011100 C
b1011100 V
b1100000 6
b1100000 B
b1100000 ]
b10000 H
b10000 Q
b1100000 >
b1100000 ^
b100 4
b100 X
b101100 #
b101100 U
b100 K
b100 P
b100 W
b101001010000000000000010000 S
b101001010000000000000010000 O
b1010 ?
b1010 [
11
1.
0-
1)
10
0/
b101100 T
b101100 a
b111100 I
b111100 `
b100 J
b100 5
b1010010100000000000000100 N
b1010 =
b1010 Z
b1001 '
b101100 F
b101100 G
b101100 _
b100101010010100000000000000100 &
b101000 $
b101000 %
b101000 E
0!
#55
b0 A
b0 C
b0 V
b0 2
b0 @
b1100000 H
b1100000 Q
bx >
bx ^
b0 4
b0 X
b110000 #
b110000 U
b11000 K
b11000 P
b11000 W
b0 ?
b0 [
b1100000 S
b1100000 O
01
0.
b0 (
b0 3
0)
00
b110000 T
b110000 a
b10010000 I
b10010000 `
b11000 J
b11000 5
b0 =
b0 Z
b11000 N
b0 <
b10000 '
b110000 F
b110000 G
b110000 _
b1000000000000000000000000011000 &
b101100 $
b101100 %
b101100 E
0!
#60
b100000000 4
b100000000 X
b100000000 A
b100000000 C
b100000000 V
b1100000 2
b1100000 @
b0 H
b0 Q
b110100 #
b110100 U
b0 K
b0 P
b0 W
b101100000 6
b101100000 B
b101100000 ]
b101 ?
b101 [
b101000101000000000000000000 S
b101000101000000000000000000 O
1-
b101 (
b101 3
b110100 T
b110100 a
b110100 I
b110100 `
b0 J
b0 5
b101 =
b101 Z
b1010001010000000000000000 N
b1010 <
b101011 '
b110100 F
b110100 G
b110100 _
b10101101010001010000000000000000 &
b110000 $
b110000 %
b110000 E
0!
#65
b1100000 A
b1100000 C
b1100000 V
b1100100 6
b1100100 B
b1100100 ]
b10000 H
b10000 Q
b1100100 >
b1100100 ^
b100 4
b100 X
b111000 #
b111000 U
b100 K
b100 P
b100 W
b101001010000000000000010000 S
b101001010000000000000010000 O
b1010 ?
b1010 [
11
1.
0-
1)
10
b111000 T
b111000 a
b1001000 I
b1001000 `
b100 J
b100 5
b1010010100000000000000100 N
b1010 =
b1010 Z
b1001 '
b111000 F
b111000 G
b111000 _
b100101010010100000000000000100 &
b110100 $
b110100 %
b110100 E
0!
#70
b0 A
b0 C
b0 V
b0 2
b0 @
b0 H
b0 Q
bx >
bx ^
b0 4
b0 X
b111100 #
b111100 U
b0 K
b0 P
b0 W
b0 6
b0 B
b0 ]
b0 ?
b0 [
b0 S
b0 O
01
0.
b0 (
b0 3
0)
00
b111100 T
b111100 a
b111100 I
b111100 `
b0 J
b0 5
b0 =
b0 Z
b0 N
b0 <
b110000 '
b111100 F
b111100 G
b111100 _
b11000000000000000000000000000000 &
b111000 $
b111000 %
b111000 E
0!
#75
b100000000 4
b100000000 X
b101100100 6
b101100100 B
b101100100 ]
b100000000 A
b100000000 C
b100000000 V
b1100100 2
b1100100 @
b1000000 #
b1000000 U
b101 ?
b101 [
b101000101000000000000000000 S
b101000101000000000000000000 O
1-
b101 (
b101 3
b1000000 T
b1000000 a
b1000000 I
b1000000 `
b101 =
b101 Z
b1010001010000000000000000 N
b1010 <
b101011 '
b1000000 F
b1000000 G
b1000000 _
b10101101010001010000000000000000 &
b111100 $
b111100 %
b111100 E
0!
#80
b0 4
b0 X
b0 6
b0 B
b0 ]
b0 A
b0 C
b0 V
b0 2
b0 @
b0 >
b0 ^
b1000100 #
b1000100 U
b0 ?
b0 [
b0 S
b0 O
1.
0-
b0 (
b0 3
10
1/
b1000100 T
b1000100 a
b1000100 I
b1000100 `
b0 =
b0 Z
b0 N
b0 <
b0 '
b1000100 F
b1000100 G
b1000100 _
b0 &
b1000000 $
b1000000 %
b1000000 E
0!
#85
b1001000 #
b1001000 U
b1001000 T
b1001000 a
b1001000 I
b1001000 `
b1001000 F
b1001000 G
b1001000 _
b1000100 $
b1000100 %
b1000100 E
0!
#90
b11111111111111111111111111111100 H
b11111111111111111111111111111100 Q
1R
bx >
bx ^
b1001000 #
b1001000 U
b111111111111111100 S
b111111111111111100 O
b11111111111111111111111111111111 K
b11111111111111111111111111111111 P
b11111111111111111111111111111111 W
1*
0.
b1 (
b1 3
00
0/
b1001000 T
b1001000 a
b1001000 I
b1001000 `
b111111 5
b1111111111111111 N
b1111111111111111 J
b11111 Y
b100 '
b1001100 F
b1001100 G
b1001100 _
b10000000000001111111111111111 &
b1001000 $
b1001000 %
b1001000 E
0!
#95
0!
#100
0!
#105
0!
#110
0!
#115
0!
#120
0!
#125
0!
#130
0!
#135
0!
#140
0!
#145
0!
#150
0!
#155
0!
#160
0!
#165
0!
#170
0!
#175
0!
#180
0!
#185
0!
#190
0!
#195
0!
#200
0!
#205
0!
#210
0!
#215
0!
#220
0!
#225
0!
#230
0!
#235
0!
#240
0!
#245
0!
#250
0!
#255
0!
#260
0!
#265
0!
#270
0!
#275
0!
#280
0!
#285
0!
#290
0!
#295
0!
#300
0!
#305
0!
#310
0!
#315
0!
#320
0!
#325
0!
#330
0!
#335
0!
#340
0!
#345
0!
#350
0!
#355
0!
#360
0!
#365
0!
#370
0!
#375
0!
#380
0!
#385
0!
#390
0!
#395
0!
#400
0!
#405
0!
#410
0!
#415
0!
#420
0!
#425
0!
#430
0!
#435
0!
#440
0!
#445
0!
#450
0!
#455
0!
#460
0!
#465
0!
#470
0!
#475
0!
#480
0!
#485
0!
#490
0!
#495
0!
#500
0!
#505
0!
#510
0!
#515
0!
#520
0!
#525
0!
#530
0!
#535
0!
#540
0!
#545
0!
#550
0!
#555
0!
#560
0!
#565
0!
#570
0!
#575
0!
#580
0!
#585
0!
#590
0!
#595
0!
#600
0!
#605
0!
#610
0!
#615
0!
#620
0!
#625
0!
#630
0!
#635
0!
#640
0!
#645
0!
#650
1!
